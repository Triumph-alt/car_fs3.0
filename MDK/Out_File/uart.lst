C251 COMPILER V5.60.0,  uart                                                               18/07/25  22:42:55  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE uart
OBJECT MODULE PLACED IN .\Out_File\uart.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\uart.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZ
                    -E(0,SPEED) BROWSE INCDIR(..\USER\inc;..\USER\src;..\libraries;..\seekfree_libraries;..\seekfree_peripheral) DEBUG PRINT(
                    -.\Out_File\uart.lst) OBJECT(.\Out_File\uart.obj) 

stmt  level    source

    1          #include "uart.h"
    2          
    3          //串口收发相关数据
    4          uint8_t g_txbuffer[UART_TX_LENGTH] = {0};
    5          uint8_t g_rxbuffer[UART_RX_LENGTH] = {0};
    6          uint8_t g_rxpointer = 0, g_rxdat = 0;
    7          
    8          float temp = 0;
    9          
   10          void uart4_recv_task(void)
   11          {
   12   1              if (g_rxpointer != 0)
   13   1              {
   14   2                      int temp = g_rxpointer;
   15   2                      delay_ms(4);
   16   2                      
   17   2                      if (temp == g_rxpointer)
   18   2                      {
   19   3                              uart4_interrupt_callback();
   20   3                      }
   21   2              }
   22   1      }
   23          
   24          void uart4_interrupt_callback(void)
   25          {
   26   1              if(g_rxpointer > 0)
   27   1              {
   28   2                      if (strncmp(g_rxbuffer, "speed_kp", 8) == 0)
   29   2                      {
   30   3                              sscanf(g_rxbuffer, "speed_kp:%f", &SpeedPID.kp);
   31   3                              
   32   3      //                      sprintf(g_txbuffer, "speed_kp:%f\n", SpeedPID.kp);
   33   3      //                      uart_putstr(UART_4, g_txbuffer);
   34   3                      }
   35   2                      else if (strncmp(g_rxbuffer, "speed_ki", 8) == 0)
   36   2                      {
   37   3                              sscanf(g_rxbuffer, "speed_ki:%f", &SpeedPID.ki);
   38   3                              
   39   3      //                      sprintf(g_txbuffer, "speed_ki:%f\n", SpeedPID.ki);
   40   3      //                      uart_putstr(UART_4, g_txbuffer);
   41   3                      }
   42   2                      else if (strncmp(g_rxbuffer, "speed_kd", 8) == 0)
   43   2                      {
   44   3                              sscanf(g_rxbuffer, "speed_kd:%f", &SpeedPID.kd);
   45   3                              
   46   3      //                      sprintf(g_txbuffer, "speed_kd:%f\n", SpeedPID.kd);
   47   3      //                      uart_putstr(UART_4, g_txbuffer);
   48   3                      }
   49   2                      else if (strncmp(g_rxbuffer, "turn_kp", 7) == 0)
   50   2                      {
   51   3                              sscanf(g_rxbuffer, "turn_kp:%f", &TurnPID.kp);
   52   3                              
   53   3      //                      sprintf(g_txbuffer, "turn_kp:%f\n", TurnPID.kp);
   54   3      //                      uart_putstr(UART_4, g_txbuffer);
   55   3                      }
   56   2                      else if (strncmp(g_rxbuffer, "turn_ki", 7) == 0)
   57   2                      {
C251 COMPILER V5.60.0,  uart                                                               18/07/25  22:42:55  PAGE 2   

   58   3                              sscanf(g_rxbuffer, "turn_ki:%f", &TurnPID.ki);
   59   3                              
   60   3      //                      sprintf(g_txbuffer, "turn_ki:%f\n", TurnPID.ki);
   61   3      //                      uart_putstr(UART_4, g_txbuffer);
   62   3                      }
   63   2                      else if (strncmp(g_rxbuffer, "turn_kd", 7) == 0)
   64   2                      {
   65   3                              sscanf(g_rxbuffer, "turn_kd:%f", &TurnPID.kd);
   66   3                              
   67   3      //                      sprintf(g_txbuffer, "turn_kd:%f\n", TurnPID.kd);
   68   3      //                      uart_putstr(UART_4, g_txbuffer);
   69   3                      }
   70   2                      else if (strncmp(g_rxbuffer, "angle_kp", 8) == 0)
   71   2                      {
   72   3                              sscanf(g_rxbuffer, "angle_kp:%f", &angle_kp);
   73   3                      }
   74   2                      else if (strncmp(g_rxbuffer, "angle_kd", 8) == 0)
   75   2                      {
   76   3                              sscanf(g_rxbuffer, "angle_kd:%f", &angle_kd);
   77   3                      }
   78   2                      else if (strncmp(g_rxbuffer, "stop", 4) == 0)
   79   2                      {                       
   80   3                              protection_flag = 1;
   81   3                      }
   82   2                      else if (strncmp(g_rxbuffer, "i_p", 3) == 0)
   83   2                      {
   84   3                              sscanf(g_rxbuffer, "i_p:%f", &temp);
   85   3                              intoisland_pos = (uint8_t)temp;
   86   3                              // sprintf(g_TxData, "r_p:%d\n", r_position);
   87   3                              // uart_putstr(UART_4, g_TxData);
   88   3                      }
   89   2                      else if (strncmp(g_rxbuffer, "o_p", 3) == 0)
   90   2                      {
   91   3                              sscanf(g_rxbuffer, "o_p:%f", &temp);
   92   3                              outisland_pos = (uint8_t)temp;
   93   3                              // sprintf(g_TxData, "r_p:%d\n", r_position);
   94   3                              // uart_putstr(UART_4, g_TxData);
   95   3                      }
   96   2                      else if (strncmp(g_rxbuffer, "i_s_d", 5) == 0)
   97   2                      {
   98   3                              sscanf(g_rxbuffer, "i_s_d:%f", &temp);
   99   3                              intoisland_str_dist = (uint16_t)temp;
  100   3                              // sprintf(g_TxData, "r_d:%d\n", r_distance);
  101   3                              // uart_putstr(UART_4, g_TxData);
  102   3                      }
  103   2                      else if (strncmp(g_rxbuffer, "o_t_d", 5) == 0)
  104   2                      {
  105   3                              sscanf(g_rxbuffer, "o_t_d:%f", &temp);
  106   3                              outisland_turn_dist = (uint16_t)temp;
  107   3                              // sprintf(g_TxData, "r_d:%d\n", r_distance);
  108   3                              // uart_putstr(UART_4, g_TxData);
  109   3                      }
  110   2                      else if (strncmp(g_rxbuffer, "i_a_d", 5) == 0)
  111   2                      {
  112   3                              sscanf(g_rxbuffer, "i_a_d:%f", &temp);
  113   3                              intoisland_all_dist = (uint16_t)temp;
  114   3                              // sprintf(g_TxData, "r_d:%d\n", r_distance);
  115   3                              // uart_putstr(UART_4, g_TxData);
  116   3                      }
  117   2                      else if (strncmp(g_rxbuffer, "o_a_d", 5) == 0)
  118   2                      {
  119   3                              sscanf(g_rxbuffer, "o_a_d:%f", &temp);
  120   3                              outisland_all_dist = (uint16_t)temp;
  121   3                              // sprintf(g_TxData, "r_d:%d\n", r_distance);
  122   3                              // uart_putstr(UART_4, g_TxData);
  123   3                      }
C251 COMPILER V5.60.0,  uart                                                               18/07/25  22:42:55  PAGE 3   

  124   2              }
  125   1              
  126   1              g_rxpointer = 0;
  127   1              memset(g_rxbuffer, 0, UART_RX_LENGTH);
  128   1              memset(g_txbuffer, 0, UART_TX_LENGTH);
  129   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1258     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       408     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       680     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
