C251 COMPILER V5.60.0,  zf_fifo                                                            06/07/25  17:18:00  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_fifo
OBJECT MODULE PLACED IN .\Out_File\zf_fifo.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\seekfree_libraries\zf_fifo.c LARGE INTR2 WARNINGLEV
                    -EL(3) OPTIMIZE(0,SPEED) BROWSE INCDIR(..\USER\inc;..\USER\src;..\libraries;..\seekfree_libraries;..\seekfree_peripheral)
                    - DEBUG PRINT(.\Out_File\zf_fifo.lst) TABS(2) OBJECT(.\Out_File\zf_fifo.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,ÈÄêÈ£ûÁßëÊäÄ
    4           * All rights reserved.
    5           * ÊäÄÊúØËÆ®ËÆ∫QQÁæ§Ôºö‰∏ÄÁæ§Ôºö179029047(Â∑≤Êª°)  ‰∫åÁæ§Ôºö244861897(Â∑≤Êª°)  ‰∏âÁæ§Ôºö824575535
    6           *
    7           * ‰ª•‰∏ãÊâÄÊúâÂÜÖÂÆπÁâàÊùÉÂùáÂ±ûÈÄêÈ£ûÁßëÊäÄÊâÄÊúâÔºåÊú™ÁªèÂÖÅËÆ∏‰∏çÂæóÁî®‰∫éÂïÜ‰∏öÁî®ÈÄîÔºå
    8           * Ê¨¢ËøéÂêÑ‰Ωç‰ΩøÁî®Âπ∂‰º†Êí≠Êú¨Á®ãÂ∫èÔºå‰øÆÊîπÂÜÖÂÆπÊó∂ÂøÖÈ°ª‰øùÁïôÈÄêÈ£ûÁßëÊäÄÁöÑÁâàÊùÉÂ£∞Êòé„ÄÇ
    9           *
   10           * @file          fifo
   11           * @company       ÊàêÈÉΩÈÄêÈ£ûÁßëÊäÄÊúâÈôêÂÖ¨Âè∏
   12           * @author        ÈÄêÈ£ûÁßëÊäÄ(QQ790875685)
   13           * @version       Êü•ÁúãdocÂÜÖversionÊñá‰ª∂ ÁâàÊú¨ËØ¥Êòé
   14           * @Software    MDK FOR C251 V5.60
   15           * @Target core   STC32F12K
   16           * @Taobao      https://seekfree.taobao.com/
   17           * @date          2020-4-14
   18           ********************************************************************************************************
             -************/
   19          
   20          
   21          
   22          #include "stdio.h"
   23          #include "string.h"
   24          #include "board.h"
   25          #include "zf_gpio.h"
   26          #include "zf_uart.h"
   27          #include "zf_nvic.h"
   28          #include "zf_delay.h"
   29          #include "zf_fifo.h"
   30          
   31          
   32          
   33          
   34          //-------------------------------------------------------------------------------------------------------
             -------------
   35          // ÂáΩÊï∞ÁÆÄ‰ªã     FIFO Â§¥ÊåáÈíà‰ΩçÁßª
   36          // ÂèÇÊï∞ËØ¥Êòé     *fifo               FIFO ÂØπË±°ÊåáÈíà
   37          // ÂèÇÊï∞ËØ¥Êòé     offset              ÂÅèÁßªÈáè
   38          // ËøîÂõûÂèÇÊï∞     void
   39          // ‰ΩøÁî®Á§∫‰æã     fifo_head_offset(fifo, 1);
   40          // Â§áÊ≥®‰ø°ÊÅØ     Êú¨ÂáΩÊï∞Âú®Êñá‰ª∂ÂÜÖÈÉ®Ë∞ÉÁî® Áî®Êà∑‰∏çÁî®ÂÖ≥Ê≥® ‰πü‰∏çÂèØ‰øÆÊîπ
   41          //-------------------------------------------------------------------------------------------------------
             -------------
   42          static void fifo_head_offset (fifo_struct *fifo, uint32 offset)
   43          {
   44   1          fifo->head += offset;
   45   1          
   46   1          while(fifo->max <= fifo->head)                                              // Â¶ÇÊûúËåÉÂõ¥Ë∂ÖËøáÂàôÂ
             -áèÁºìÂÜ≤Âå∫Â§ßÂ∞è Áõ¥Âà∞Â∞è‰∫éÊúÄÂ§ßÁºìÂÜ≤Âå∫Â§ßÂ∞è
   47   1          {
   48   2              fifo->head -= fifo->max;
   49   2          }
   50   1      }
   51          
   52          //-------------------------------------------------------------------------------------------------------
C251 COMPILER V5.60.0,  zf_fifo                                                            06/07/25  17:18:00  PAGE 2   

             -------------
   53          // ÂáΩÊï∞ÁÆÄ‰ªã     FIFO Â∞æÊåáÈíà‰ΩçÁßª
   54          // ÂèÇÊï∞ËØ¥Êòé     *fifo               FIFO ÂØπË±°ÊåáÈíà
   55          // ÂèÇÊï∞ËØ¥Êòé     offset              ÂÅèÁßªÈáè
   56          // ËøîÂõûÂèÇÊï∞     void
   57          // ‰ΩøÁî®Á§∫‰æã     fifo_end_offset(fifo, 1);
   58          // Â§áÊ≥®‰ø°ÊÅØ     Êú¨ÂáΩÊï∞Âú®Êñá‰ª∂ÂÜÖÈÉ®Ë∞ÉÁî® Áî®Êà∑‰∏çÁî®ÂÖ≥Ê≥® ‰πü‰∏çÂèØ‰øÆÊîπ
   59          //-------------------------------------------------------------------------------------------------------
             -------------
   60          static void fifo_end_offset (fifo_struct *fifo, uint32 offset)
   61          {
   62   1          fifo->end += offset;
   63   1          
   64   1          while(fifo->max <= fifo->end)                                               // Â¶ÇÊûúËåÉÂõ¥Ë∂ÖËøáÂàôÂ
             -áèÁºìÂÜ≤Âå∫Â§ßÂ∞è Áõ¥Âà∞Â∞è‰∫éÊúÄÂ§ßÁºìÂÜ≤Âå∫Â§ßÂ∞è
   65   1          {
   66   2              fifo->end -= fifo->max;
   67   2          }
   68   1      }
   69          
   70          //-------------------------------------------------------------------------------------------------------
             -------------
   71          // ÂáΩÊï∞ÁÆÄ‰ªã     FIFO ÈáçÁΩÆÁºìÂÜ≤Âô®
   72          // ÂèÇÊï∞ËØ¥Êòé     *fifo               FIFO ÂØπË±°ÊåáÈíà
   73          // ËøîÂõûÂèÇÊï∞     void
   74          // ‰ΩøÁî®Á§∫‰æã     fifo_clear(fifo);
   75          // Â§áÊ≥®‰ø°ÊÅØ     Ê∏ÖÁ©∫ÂΩìÂâç FIFO ÂØπË±°ÁöÑÂÜÖÂ≠ò
   76          //-------------------------------------------------------------------------------------------------------
             -------------
   77          fifo_state_enum fifo_clear (fifo_struct *fifo)
   78          {
   79   1          //zf_assert(NULL != fifo);
   80   1          fifo_state_enum return_state = FIFO_SUCCESS;                                // Êìç‰ΩúÁªìÊûúÂàùÂÄº
   81   1          do
   82   1          {
   83   2      //        if(FIFO_IDLE != fifo->execution)                                        // Âà§Êñ≠ÊòØÂê¶ÂΩìÂâç F
             -IFO ÊòØÂê¶Á©∫Èó≤
   84   2      //        {
   85   2      //            return_state = FIFO_RESET_UNDO;                                     // ÈáçÁΩÆÊìç‰ΩúÊú™ÂÆåÊà
             -ê
   86   2      //            break;
   87   2      //        }
   88   2              fifo->execution |= FIFO_RESET;                                          // ÈáçÁΩÆÊìç‰ΩúÁΩÆ‰Ωç
   89   2              fifo->head      = 0;                                                    // ÈáçÁΩÆ FIFO ÊâÄÊúâÊï∞Â
             -ÄºÂ§ç‰Ωç
   90   2              fifo->end       = 0;                                                    // ÈáçÁΩÆ FIFO ÊâÄÊúâÊï∞Â
             -ÄºÂ§ç‰Ωç
   91   2              fifo->reamin_size      = fifo->max;                                            // ÈáçÁΩÆ FIFO ÊâÄ
             -ÊúâÊï∞ÂÄºÂ§ç‰Ωç
   92   2              switch(fifo->type)
   93   2              {
   94   3                  case FIFO_DATA_8BIT:    memset(fifo->buffer, 0, (uint16)fifo->max);     break;
   95   3                  case FIFO_DATA_16BIT:   memset(fifo->buffer, 0, (uint16)fifo->max * 2); break;
   96   3                  case FIFO_DATA_32BIT:   memset(fifo->buffer, 0, (uint16)fifo->max * 4); break;
   97   3              }
   98   2              fifo->execution = FIFO_IDLE;                                            // Êìç‰ΩúÁä∂ÊÄÅÂ§ç‰Ωç
   99   2          }while(0);
  100   1          return return_state;
  101   1      }
  102          
  103          //-------------------------------------------------------------------------------------------------------
             -------------
  104          // ÂáΩÊï∞ÁÆÄ‰ªã     FIFO Êü•ËØ¢ÂΩìÂâçÊï∞ÊçÆ‰∏™Êï∞
  105          // ÂèÇÊï∞ËØ¥Êòé     *fifo               FIFO ÂØπË±°ÊåáÈíà
  106          // ËøîÂõûÂèÇÊï∞     uint32              Â∑≤‰ΩøÁî®ÈïøÂ∫¶
  107          // ‰ΩøÁî®Á§∫‰æã     uint32 len = fifo_used(fifo);
C251 COMPILER V5.60.0,  zf_fifo                                                            06/07/25  17:18:00  PAGE 3   

  108          // Â§áÊ≥®‰ø°ÊÅØ
  109          //-------------------------------------------------------------------------------------------------------
             -------------
  110          uint32 fifo_used (fifo_struct *fifo)
  111          {
  112   1          //zf_assert(fifo != NULL);
  113   1          return (fifo->max - fifo->reamin_size);                                            // ËøîÂõûÂΩìÂâç FI
             -FO ÁºìÂÜ≤Âå∫‰∏≠Êï∞ÊçÆ‰∏™Êï∞
  114   1      }
  115          
  116          //-------------------------------------------------------------------------------------------------------
             -------------
  117          // ÂáΩÊï∞ÁÆÄ‰ªã     Âêë FIFO ‰∏≠ÂÜôÂÖ•Êï∞ÊçÆ
  118          // ÂèÇÊï∞ËØ¥Êòé     *fifo               FIFO ÂØπË±°ÊåáÈíà
  119          // ÂèÇÊï∞ËØ¥Êòé     dat                 Êï∞ÊçÆ
  120          // ËøîÂõûÂèÇÊï∞     fifo_state_enum     Êìç‰ΩúÁä∂ÊÄÅ
  121          // ‰ΩøÁî®Á§∫‰æã     zf_log(fifo_write_element(&fifo, data) == FIFO_SUCCESS, "fifo_write_byte error");
  122          // Â§áÊ≥®‰ø°ÊÅØ
  123          //-------------------------------------------------------------------------------------------------------
             -------------
  124          fifo_state_enum fifo_write_element (fifo_struct *fifo, uint32 dat)
  125          {
  126   1          //zf_assert(NULL != fifo);
  127   1          fifo_state_enum return_state = FIFO_SUCCESS;                                // Êìç‰ΩúÁªìÊûúÂàùÂÄº
  128   1      
  129   1          do
  130   1          {
  131   2              if((FIFO_RESET | FIFO_WRITE) & fifo->execution)                         // ‰∏çÂú®ÂÜôÂÖ•‰∏éÈáçÁΩÆÁ
             -ä∂ÊÄÅ ÈÅøÂÖçÂÜôÂÖ•Á´û‰∫â‰∏éÊåáÂêëÈîôËØØ
  132   2              {
  133   3                  return_state = FIFO_WRITE_UNDO;                                     // ÂÜôÂÖ•Êìç‰ΩúÊú™ÂÆåÊàê
  134   3                  break;
  135   3              }
  136   2              fifo->execution |= FIFO_WRITE;                                          // ÂÜôÂÖ•Êìç‰ΩúÁΩÆ‰Ωç
  137   2      
  138   2              if(1 <= fifo->reamin_size)                                                     // Ââ©‰ΩôÁ©∫Èó¥Ë∂≥
             -Â§üË£Ö‰∏ãÊú¨Ê¨°Êï∞ÊçÆ
  139   2              {
  140   3                  switch(fifo->type)
  141   3                  {
  142   4                      case FIFO_DATA_8BIT:    ((uint8 *)fifo->buffer)[fifo->head]  = dat;  break;
  143   4                      case FIFO_DATA_16BIT:   ((uint16 *)fifo->buffer)[fifo->head] = dat; break;
  144   4                      case FIFO_DATA_32BIT:   ((uint32 *)fifo->buffer)[fifo->head] = dat; break;
  145   4                  }
  146   3                  fifo_head_offset(fifo, 1);                                          // Â§¥ÊåáÈíàÂÅèÁßª
  147   3                  fifo->reamin_size -= 1;                                                    // ÁºìÂÜ≤Âå∫Ââ©‰Ωô
             -ÈïøÂ∫¶ÂáèÂ∞è
  148   3              }
  149   2              else
  150   2              {
  151   3                  return_state = FIFO_SPACE_NO_ENOUGH;                                // ÂΩìÂâç FIFO ÁºìÂÜ≤Âå∫Ê
             -ª° ‰∏çËÉΩÂÜçÂÜôÂÖ•Êï∞ÊçÆ ËøîÂõûÁ©∫Èó¥‰∏çË∂≥
  152   3              }
  153   2              fifo->execution &= ~FIFO_WRITE;                                         // ÂÜôÂÖ•Êìç‰ΩúÂ§ç‰Ωç
  154   2          }while(0);
  155   1      
  156   1          return return_state;
  157   1      }
  158          
  159          //-------------------------------------------------------------------------------------------------------
             -------------
  160          // ÂáΩÊï∞ÁÆÄ‰ªã     Âêë FIFO ‰∏≠ÂÜôÂÖ•Êï∞ÊçÆ
  161          // ÂèÇÊï∞ËØ¥Êòé     *fifo               FIFO ÂØπË±°ÊåáÈíà
  162          // ÂèÇÊï∞ËØ¥Êòé     *dat                Êï∞ÊçÆÊù•Ê∫êÁºìÂÜ≤Âå∫ÊåáÈíà
  163          // ÂèÇÊï∞ËØ¥Êòé     length              ÈúÄË¶ÅÂÜôÂÖ•ÁöÑÊï∞ÊçÆÈïøÂ∫¶
  164          // ËøîÂõûÂèÇÊï∞     fifo_state_enum     Êìç‰ΩúÁä∂ÊÄÅ
C251 COMPILER V5.60.0,  zf_fifo                                                            06/07/25  17:18:00  PAGE 4   

  165          // ‰ΩøÁî®Á§∫‰æã     zf_log(fifo_write_buffer(&fifo, data, 32) == FIFO_SUCCESS, "fifo_write_buffer error")
             -;
  166          // Â§áÊ≥®‰ø°ÊÅØ
  167          //-------------------------------------------------------------------------------------------------------
             -------------
  168          fifo_state_enum fifo_write_buffer (fifo_struct *fifo, void *dat, uint32 length)
  169          {
  170   1          //zf_assert(NULL != fifo);
  171   1          fifo_state_enum return_state = FIFO_SUCCESS;                                // Êìç‰ΩúÁªìÊûúÂàùÂÄº
  172   1          uint32 temp_length = 0;
  173   1          
  174   1          do
  175   1          {
  176   2              if(NULL == dat)
  177   2              {
  178   3                  return_state = FIFO_BUFFER_NULL;                                    // Áî®Êà∑ÁºìÂÜ≤Âå∫ÂºÇÂ∏∏
  179   3                  break;
  180   3              }
  181   2              if((FIFO_RESET | FIFO_WRITE) & fifo->execution)                         // ‰∏çÂú®ÂÜôÂÖ•‰∏éÈáçÁΩÆÁ
             -ä∂ÊÄÅ ÈÅøÂÖçÂÜôÂÖ•Á´û‰∫â‰∏éÊåáÂêëÈîôËØØ
  182   2              {
  183   3                  return_state = FIFO_WRITE_UNDO;                                     // ÂÜôÂÖ•Êìç‰ΩúÊú™ÂÆåÊàê
  184   3                  break;
  185   3              }
  186   2              fifo->execution |= FIFO_WRITE;                                          // ÂÜôÂÖ•Êìç‰ΩúÁΩÆ‰Ωç
  187   2      
  188   2              if(length <= fifo->reamin_size)                                                // Ââ©‰ΩôÁ©∫Èó¥Ë∂≥
             -Â§üË£Ö‰∏ãÊú¨Ê¨°Êï∞ÊçÆ
  189   2              {
  190   3                  temp_length = fifo->max - fifo->head;                               // ËÆ°ÁÆóÂ§¥ÊåáÈíàË∑ùÁ¶ªÁ
             -ºìÂÜ≤Âå∫Â∞æËøòÊúâÂ§öÂ∞ëÁ©∫Èó¥
  191   3      
  192   3                  if(length > temp_length)                                            // Ë∑ùÁ¶ªÁºìÂÜ≤Âå∫Â∞æÈïøÂ
             -∫¶‰∏çË∂≥ÂÜôÂÖ•Êï∞ÊçÆ ÁéØÂΩ¢ÁºìÂÜ≤Âå∫ÂàÜÊÆµÊìç‰Ωú
  193   3                  {
  194   4                      switch(fifo->type)
  195   4                      {
  196   5                          case FIFO_DATA_8BIT:
  197   5                          {
  198   6                              memcpy(
  199   6                                  &(((uint8 *)fifo->buffer)[fifo->head]),
  200   6                                  dat, (uint16)temp_length);                                  // Êã∑Ë¥ùÁ¨¨‰∏ÄÊÆ
             -µÊï∞ÊçÆ
  201   6                              fifo_head_offset(fifo, temp_length);                    // Â§¥ÊåáÈíàÂÅèÁßª
  202   6                              memcpy(
  203   6                                  &(((uint8 *)fifo->buffer)[fifo->head]),
  204   6                                  &(((uint8 *)dat)[temp_length]),
  205   6                                  (uint16)(length - temp_length));                              // Êã∑Ë¥ùÁ¨¨‰∫å
             -ÊÆµÊï∞ÊçÆ
  206   6                              fifo_head_offset(fifo, length - temp_length);           // Â§¥ÊåáÈíàÂÅèÁßª
  207   6                          }break;
  208   5                          case FIFO_DATA_16BIT:
  209   5                          {
  210   6                              memcpy(
  211   6                                  &(((uint16 *)fifo->buffer)[fifo->head]),
  212   6                                  dat, temp_length * 2);                              // Êã∑Ë¥ùÁ¨¨‰∏ÄÊÆµÊï∞ÊçÆ
  213   6                              fifo_head_offset(fifo, temp_length);                    // Â§¥ÊåáÈíàÂÅèÁßª
  214   6                              memcpy(
  215   6                                  &(((uint16 *)fifo->buffer)[fifo->head]),
  216   6                                  &(((uint16 *)dat)[temp_length]),
  217   6                                  (length - temp_length) * 2);                        // Êã∑Ë¥ùÁ¨¨‰∫åÊÆµÊï∞ÊçÆ
  218   6                              fifo_head_offset(fifo, length - temp_length);           // Â§¥ÊåáÈíàÂÅèÁßª
  219   6                          }break;
  220   5                          case FIFO_DATA_32BIT:
  221   5                          {
  222   6                              memcpy(
C251 COMPILER V5.60.0,  zf_fifo                                                            06/07/25  17:18:00  PAGE 5   

  223   6                                  &(((uint32 *)fifo->buffer)[fifo->head]),
  224   6                                  dat, temp_length * 4);                              // Êã∑Ë¥ùÁ¨¨‰∏ÄÊÆµÊï∞ÊçÆ
  225   6                              fifo_head_offset(fifo, temp_length);                    // Â§¥ÊåáÈíàÂÅèÁßª
  226   6                              memcpy(
  227   6                                  &(((uint32 *)fifo->buffer)[fifo->head]),
  228   6                                  &(((uint32 *)dat)[temp_length]),
  229   6                                  (length - temp_length) * 4);                        // Êã∑Ë¥ùÁ¨¨‰∫åÊÆµÊï∞ÊçÆ
  230   6                              fifo_head_offset(fifo, length - temp_length);           // Â§¥ÊåáÈíàÂÅèÁßª
  231   6                          }break;
  232   5                      }
  233   4                  }
  234   3                  else
  235   3                  {
  236   4                      switch(fifo->type)
  237   4                      {
  238   5                          case FIFO_DATA_8BIT:
  239   5                          {
  240   6                              memcpy(
  241   6                                  &(((uint8 *)fifo->buffer)[fifo->head]),
  242   6                                  dat, (uint16)length);                                       // ‰∏ÄÊ¨°ÂÆåÊï¥ÂÜ
             -ôÂÖ•
  243   6                              fifo_head_offset(fifo, length);                         // Â§¥ÊåáÈíàÂÅèÁßª
  244   6                          }break;
  245   5                          case FIFO_DATA_16BIT:
  246   5                          {
  247   6                              memcpy(
  248   6                                  &(((uint16 *)fifo->buffer)[fifo->head]),
  249   6                                  dat, length * 2);                                   // ‰∏ÄÊ¨°ÂÆåÊï¥ÂÜôÂÖ•
  250   6                              fifo_head_offset(fifo, length);                         // Â§¥ÊåáÈíàÂÅèÁßª
  251   6                          }break;
  252   5                          case FIFO_DATA_32BIT:
  253   5                          {
  254   6                              memcpy(
  255   6                                  &(((uint32 *)fifo->buffer)[fifo->head]),
  256   6                                  dat, length * 4);                                   // ‰∏ÄÊ¨°ÂÆåÊï¥ÂÜôÂÖ•
  257   6                              fifo_head_offset(fifo, length);                         // Â§¥ÊåáÈíàÂÅèÁßª
  258   6                          }break;
  259   5                      }
  260   4                  }
  261   3      
  262   3                  fifo->reamin_size -= length;                                               // ÁºìÂÜ≤Âå∫Ââ©‰Ωô
             -ÈïøÂ∫¶ÂáèÂ∞è
  263   3              }
  264   2              else
  265   2              {
  266   3                  return_state = FIFO_SPACE_NO_ENOUGH;                                // ÂΩìÂâç FIFO ÁºìÂÜ≤Âå∫Ê
             -ª° ‰∏çËÉΩÂÜçÂÜôÂÖ•Êï∞ÊçÆ ËøîÂõûÁ©∫Èó¥‰∏çË∂≥
  267   3              }
  268   2              fifo->execution &= ~FIFO_WRITE;                                         // ÂÜôÂÖ•Êìç‰ΩúÂ§ç‰Ωç
  269   2          }while(0);
  270   1      
  271   1          return return_state;
  272   1      }
  273          
  274          //-------------------------------------------------------------------------------------------------------
             -------------
  275          // ÂáΩÊï∞ÁÆÄ‰ªã     ‰ªé FIFO ËØªÂèñÊï∞ÊçÆ
  276          // ÂèÇÊï∞ËØ¥Êòé     *fifo               FIFO ÂØπË±°ÊåáÈíà
  277          // ÂèÇÊï∞ËØ¥Êòé     *dat                ÁõÆÊ†áÁºìÂÜ≤Âå∫ÊåáÈíà
  278          // ÂèÇÊï∞ËØ¥Êòé     flag                ÊòØÂê¶ÂèòÊõ¥ FIFO Áä∂ÊÄÅ ÂèØÈÄâÊã©ÊòØÂê¶Ê∏ÖÁ©∫ËØªÂèñÁöÑÊï∞ÊçÆ
  279          // ËøîÂõûÂèÇÊï∞     fifo_state_enum     Êìç‰ΩúÁä∂ÊÄÅ
  280          // ‰ΩøÁî®Á§∫‰æã     zf_log(fifo_read_element(&fifo, data, FIFO_READ_ONLY) == FIFO_SUCCESS, "fifo_read_byt
             -e error");
  281          // Â§áÊ≥®‰ø°ÊÅØ
  282          //-------------------------------------------------------------------------------------------------------
             -------------
C251 COMPILER V5.60.0,  zf_fifo                                                            06/07/25  17:18:00  PAGE 6   

  283          fifo_state_enum fifo_read_element (fifo_struct *fifo, void *dat, fifo_operation_enum flag)
  284          {
  285   1          //zf_assert(NULL != fifo);
  286   1          fifo_state_enum return_state = FIFO_SUCCESS;                                // Êìç‰ΩúÁªìÊûúÂàùÂÄº
  287   1      
  288   1          do
  289   1          {
  290   2              if(NULL == dat)
  291   2              {
  292   3                  return_state = FIFO_BUFFER_NULL;                                    // Áî®Êà∑ÁºìÂÜ≤Âå∫ÂºÇÂ∏∏
  293   3              }
  294   2              else
  295   2              {
  296   3                  if((FIFO_RESET | FIFO_CLEAR) & fifo->execution)                     // Âà§Êñ≠ÊòØÂê¶ÂΩìÂâç FIF
             -O ÊòØÂê¶Âú®ÊâßË°åÊ∏ÖÁ©∫ÊàñÈáçÁΩÆÊìç‰Ωú
  297   3                  {
  298   4                      return_state = FIFO_READ_UNDO;                                  // ËØªÂèñÊìç‰ΩúÊú™ÂÆåÊàê
  299   4                      break;
  300   4                  }
  301   3      
  302   3                  if(1 > fifo_used(fifo))
  303   3                  {
  304   4                      return_state = FIFO_DATA_NO_ENOUGH;                             // ÁºìÂÜ≤Âå∫Ê≤°ÊúâÊï∞ÊçÆ 
             -ËøîÂõûÊï∞ÊçÆÈïøÂ∫¶‰∏çË∂≥
  305   4                      break;                                                          // Áõ¥Êé•ÈÄÄÂá∫Êìç‰Ωú
  306   4                  }
  307   3      
  308   3                  fifo->execution |= FIFO_READ;                                       // ËØªÊìç‰ΩúÁΩÆ‰Ωç
  309   3                  switch(fifo->type)
  310   3                  {
  311   4                      case FIFO_DATA_8BIT:    *((uint8 *)dat) = ((uint8 *)fifo->buffer)[fifo->end];   break;
  312   4                      case FIFO_DATA_16BIT:   *((uint16 *)dat) = ((uint16 *)fifo->buffer)[fifo->end]; break;
  313   4                      case FIFO_DATA_32BIT:   *((uint32 *)dat) = ((uint32 *)fifo->buffer)[fifo->end]; break;
  314   4                  }
  315   3                  fifo->execution &= ~FIFO_READ;                                      // ËØªÊìç‰ΩúÂ§ç‰Ωç
  316   3              }
  317   2      
  318   2              if(FIFO_READ_AND_CLEAN == flag)                                         // Â¶ÇÊûúÈÄâÊã©ËØªÂèñÂπ∂Ê
             -õ¥Êîπ FIFO Áä∂ÊÄÅ
  319   2              {
  320   3                  if((FIFO_RESET | FIFO_CLEAR | FIFO_READ) == fifo->execution)        // ‰∏çÂú® ÈáçÁΩÆ Ê∏ÖÁ©∫ Ë
             -ØªÂèñ Áä∂ÊÄÅ ÈÅøÂÖçÂºÇÂ∏∏
  321   3                  {
  322   4                      return_state = FIFO_CLEAR_UNDO;                                 // Ê∏ÖÁ©∫Êìç‰ΩúÊú™ÂÆåÊàê
  323   4                      break;
  324   4                  }
  325   3                  fifo->execution |= FIFO_CLEAR;                                      // Ê∏ÖÁ©∫‰ΩúÁΩÆ‰Ωç
  326   3                  fifo_end_offset(fifo, 1);                                           // ÁßªÂä® FIFO Â§¥ÊåáÈíà
  327   3                  fifo->reamin_size += 1;                                                    // ÈáäÊîæÂØπÂ∫îÈïø
             -Â∫¶Á©∫Èó¥
  328   3                  fifo->execution &= ~FIFO_CLEAR;                                     // Ê∏ÖÁ©∫‰ΩúÂ§ç‰Ωç
  329   3              }
  330   2          }while(0);
  331   1      
  332   1          return return_state;
  333   1      }
  334          
  335          //-------------------------------------------------------------------------------------------------------
             -------------
  336          // ÂáΩÊï∞ÁÆÄ‰ªã     ‰ªé FIFO ËØªÂèñÊï∞ÊçÆ
  337          // ÂèÇÊï∞ËØ¥Êòé     *fifo               FIFO ÂØπË±°ÊåáÈíà
  338          // ÂèÇÊï∞ËØ¥Êòé     *dat                ÁõÆÊ†áÁºìÂÜ≤Âå∫ÊåáÈíà
  339          // ÂèÇÊï∞ËØ¥Êòé     *length             ËØªÂèñÁöÑÊï∞ÊçÆÈïøÂ∫¶ Â¶ÇÊûúÊ≤°ÊúâËøô‰πàÂ§öÊï∞ÊçÆËøôÈáå‰ºöË¢´‰øÆÊ
             -îπ
  340          // ÂèÇÊï∞ËØ¥Êòé     flag                ÊòØÂê¶ÂèòÊõ¥ FIFO Áä∂ÊÄÅ ÂèØÈÄâÊã©ÊòØÂê¶Ê∏ÖÁ©∫ËØªÂèñÁöÑÊï∞ÊçÆ
  341          // ËøîÂõûÂèÇÊï∞     fifo_state_enum     Êìç‰ΩúÁä∂ÊÄÅ
C251 COMPILER V5.60.0,  zf_fifo                                                            06/07/25  17:18:00  PAGE 7   

  342          // ‰ΩøÁî®Á§∫‰æã     zf_log(fifo_read_buffer(&fifo, data, &length, FIFO_READ_ONLY) == FIFO_SUCCESS, "fifo_
             -read_buffer error");
  343          // Â§áÊ≥®‰ø°ÊÅØ
  344          //-------------------------------------------------------------------------------------------------------
             -------------
  345          fifo_state_enum fifo_read_buffer (fifo_struct *fifo, void *dat, uint32 *length, fifo_operation_enum flag)
  346          {
  347   1          //zf_assert(NULL != fifo);
  348   1          //zf_assert(NULL != length);
  349   1          fifo_state_enum return_state = FIFO_SUCCESS;                                // Êìç‰ΩúÁªìÊûúÂàùÂÄº
  350   1          uint32 temp_length = 0;
  351   1          uint32 fifo_data_length = 0;
  352   1      
  353   1          do
  354   1          {
  355   2              if(NULL == dat)
  356   2              {
  357   3                  return_state = FIFO_BUFFER_NULL;
  358   3              }
  359   2              else
  360   2              {
  361   3                  if((FIFO_RESET | FIFO_CLEAR) & fifo->execution)                     // Âà§Êñ≠ÊòØÂê¶ÂΩìÂâç FIF
             -O ÊòØÂê¶Âú®ÊâßË°åÊ∏ÖÁ©∫ÊàñÈáçÁΩÆÊìç‰Ωú
  362   3                  {
  363   4                      *length = fifo_data_length;                                     // Á∫†Ê≠£ËØªÂèñÁöÑÈïøÂ∫¶
  364   4                      return_state = FIFO_READ_UNDO;                                  // ËØªÂèñÊìç‰ΩúÊú™ÂÆåÊàê
  365   4                      break;
  366   4                  }
  367   3      
  368   3                  fifo_data_length = fifo_used(fifo);                                 // Ëé∑ÂèñÂΩìÂâçÊï∞ÊçÆÊúâÂ
             -§öÂ∞ë
  369   3                  if(*length > fifo_data_length)                                      // Âà§Êñ≠ÈïøÂ∫¶ÊòØÂê¶Ë∂≥Â
             -§ü
  370   3                  {
  371   4                      *length = fifo_data_length;                                     // Á∫†Ê≠£ËØªÂèñÁöÑÈïøÂ∫¶
  372   4                      return_state = FIFO_DATA_NO_ENOUGH;                             // Ê†áÂøóÊï∞ÊçÆ‰∏çÂ§ü
  373   4                      if(0 == fifo_data_length)                                       // Â¶ÇÊûúÊ≤°ÊúâÊï∞ÊçÆ Â∞±
             -Áõ¥Êé•ÈÄÄÂá∫
  374   4                      {
  375   5                          fifo->execution &= ~FIFO_READ;                              // ËØªÊìç‰ΩúÂ§ç‰Ωç
  376   5                          break;
  377   5                      }
  378   4                  }
  379   3      
  380   3                  fifo->execution |= FIFO_READ;                                       // ËØªÊìç‰ΩúÁΩÆ‰Ωç
  381   3                  temp_length = fifo->max - fifo->end;                                // ËÆ°ÁÆóÂ∞æÊåáÈíàË∑ùÁ¶ªÁ
             -ºìÂÜ≤Âå∫Â∞æËøòÊúâÂ§öÂ∞ëÁ©∫Èó¥
  382   3                  if(*length <= temp_length)                                          // Ë∂≥Â§ü‰∏ÄÊ¨°ÊÄßËØªÂèñÂ
             -ÆåÊØï
  383   3                  {
  384   4                      switch(fifo->type)
  385   4                      {
  386   5                          case FIFO_DATA_8BIT:    memcpy(dat, &(((uint8 *)fifo->buffer)[fifo->end]),  (uint16)*
             -length);        break;
  387   5                          case FIFO_DATA_16BIT:   memcpy(dat, &(((uint16 *)fifo->buffer)[fifo->end]), (uint16)*
             -length * 2);   break;
  388   5                          case FIFO_DATA_32BIT:   memcpy(dat, &(((uint32 *)fifo->buffer)[fifo->end]), (uint16)*
             -length * 4);   break;
  389   5                      }
  390   4                  }
  391   3                  else
  392   3                  {
  393   4                      switch(fifo->type)
  394   4                      {
  395   5                          case FIFO_DATA_8BIT:
  396   5                          {
C251 COMPILER V5.60.0,  zf_fifo                                                            06/07/25  17:18:00  PAGE 8   

  397   6                              memcpy(dat, &(((uint8 *)fifo->buffer)[fifo->end]), (uint16)temp_length);
  398   6                              memcpy(&(((uint8 *)dat)[temp_length]), fifo->buffer, (uint16)(*length - temp_leng
             -th));
  399   6                          }break;
  400   5                          case FIFO_DATA_16BIT:
  401   5                          {
  402   6                              memcpy(dat, &(((uint16 *)fifo->buffer)[fifo->end]), (uint16)(temp_length * 2));
  403   6                              memcpy(&(((uint16 *)dat)[temp_length]), fifo->buffer, (uint16)((*length - temp_le
             -ngth) * 2));
  404   6                          }break;
  405   5                          case FIFO_DATA_32BIT:
  406   5                          {
  407   6                              memcpy(dat, &(((uint32 *)fifo->buffer)[fifo->end]), (uint16)(temp_length * 4));
  408   6                              memcpy(&(((uint32 *)dat)[temp_length]), fifo->buffer, (uint16)((*length - temp_le
             -ngth) * 4));
  409   6                          }break;
  410   5                      }
  411   4                  }
  412   3                  fifo->execution &= ~FIFO_READ;                                      // ËØªÊìç‰ΩúÂ§ç‰Ωç
  413   3              }
  414   2      
  415   2              if(FIFO_READ_AND_CLEAN == flag)                                         // Â¶ÇÊûúÈÄâÊã©ËØªÂèñÂπ∂Ê
             -õ¥Êîπ FIFO Áä∂ÊÄÅ
  416   2              {
  417   3                  if((FIFO_RESET | FIFO_CLEAR | FIFO_READ) == fifo->execution)        // ‰∏çÂú® ÈáçÁΩÆ Ê∏ÖÁ©∫ Ë
             -ØªÂèñ Áä∂ÊÄÅ ÈÅøÂÖçÂºÇÂ∏∏
  418   3                  {
  419   4                      return_state = FIFO_CLEAR_UNDO;                                 // Ê∏ÖÁ©∫Êìç‰ΩúÊú™ÂÆåÊàê
  420   4                      break;
  421   4                  }
  422   3                  fifo->execution |= FIFO_CLEAR;                                      // Ê∏ÖÁ©∫‰ΩúÁΩÆ‰Ωç
  423   3                  fifo_end_offset(fifo, *length);                                     // ÁßªÂä® FIFO Â§¥ÊåáÈíà
  424   3                  fifo->reamin_size += *length;                                              // ÈáäÊîæÂØπÂ∫îÈïø
             -Â∫¶Á©∫Èó¥
  425   3                  fifo->execution &= ~FIFO_CLEAR;                                     // Ê∏ÖÁ©∫‰ΩúÂ§ç‰Ωç
  426   3              }
  427   2          }while(0);
  428   1      
  429   1          return return_state;
  430   1      }
  431          
  432          //-------------------------------------------------------------------------------------------------------
             -------------
  433          // ÂáΩÊï∞ÁÆÄ‰ªã     ‰ªé FIFO Â∞æÈÉ®ËØªÂèñÊåáÂÆöÈïøÂ∫¶ buffer
  434          // ÂèÇÊï∞ËØ¥Êòé     *fifo               FIFO ÂØπË±°ÊåáÈíà
  435          // ÂèÇÊï∞ËØ¥Êòé     *dat                ÁõÆÊ†áÁºìÂÜ≤Âå∫ÊåáÈíà
  436          // ÂèÇÊï∞ËØ¥Êòé     *length             ËØªÂèñÁöÑÊï∞ÊçÆÈïøÂ∫¶ Â¶ÇÊûúÊ≤°ÊúâËøô‰πàÂ§öÊï∞ÊçÆËøôÈáå‰ºöË¢´‰øÆÊ
             -îπ
  437          // ÂèÇÊï∞ËØ¥Êòé     flag                ÊòØÂê¶ÂèòÊõ¥ FIFO Áä∂ÊÄÅ ÂèØÈÄâÊã©ÊòØÂê¶Ê∏ÖÁ©∫ËØªÂèñÁöÑÊï∞ÊçÆ
  438          // ËøîÂõûÂèÇÊï∞     fifo_state_enum     Êìç‰ΩúÁä∂ÊÄÅ
  439          // ‰ΩøÁî®Á§∫‰æã     zf_log(fifo_read_tail_buffer(&fifo, data, &length, FIFO_READ_ONLY) == FIFO_SUCCESS, "
             -fifo_read_buffer error");
  440          // Â§áÊ≥®‰ø°ÊÅØ     Â¶ÇÊûú‰ΩøÁî® FIFO_READ_AND_CLEAN Êìç‰Ωú Â∞Ü‰ºö‰∏¢ÂºÉÊâÄÊúâÊï∞ÊçÆÂπ∂Ê∏ÖÁ©∫Êï¥‰∏™ FIFO
  441          //              Â¶ÇÊûú‰ΩøÁî® FIFO_READ_AND_CLEAN Êìç‰Ωú Â∞Ü‰ºö‰∏¢ÂºÉÊâÄÊúâÊï∞ÊçÆÂπ∂Ê∏ÖÁ©∫Êï¥‰∏™ FIFO
  442          //              Â¶ÇÊûú‰ΩøÁî® FIFO_READ_AND_CLEAN Êìç‰Ωú Â∞Ü‰ºö‰∏¢ÂºÉÊâÄÊúâÊï∞ÊçÆÂπ∂Ê∏ÖÁ©∫Êï¥‰∏™ FIFO
  443          //-------------------------------------------------------------------------------------------------------
             -------------
  444          fifo_state_enum fifo_read_tail_buffer (fifo_struct *fifo, void *dat, uint32 *length, fifo_operation_enum 
             -flag)
  445          {
  446   1          //zf_assert(NULL != fifo);
  447   1          //zf_assert(NULL != length);
  448   1          fifo_state_enum return_state = FIFO_SUCCESS;                                // Êìç‰ΩúÁªìÊûúÂàùÂÄº
  449   1          uint32 temp_length = 0;
  450   1          uint32 fifo_data_length = 0;
  451   1      
C251 COMPILER V5.60.0,  zf_fifo                                                            06/07/25  17:18:00  PAGE 9   

  452   1          do
  453   1          {
  454   2              if(NULL == dat)
  455   2              {
  456   3                  return_state = FIFO_BUFFER_NULL;
  457   3              }
  458   2              else
  459   2              {
  460   3                  if((FIFO_RESET | FIFO_CLEAR | FIFO_WRITE) & fifo->execution)        // Âà§Êñ≠ÊòØÂê¶ÂΩìÂâç FIF
             -O ÊòØÂê¶Âú®ÊâßË°åÊ∏ÖÁ©∫ÊàñÈáçÁΩÆÊìç‰Ωú
  461   3                  {
  462   4                      *length = fifo_data_length;                                     // Á∫†Ê≠£ËØªÂèñÁöÑÈïøÂ∫¶
  463   4                      return_state = FIFO_READ_UNDO;                                  // ËØªÂèñÊìç‰ΩúÊú™ÂÆåÊàê
  464   4                      break;
  465   4                  }
  466   3      
  467   3                  fifo_data_length = fifo_used(fifo);                                 // Ëé∑ÂèñÂΩìÂâçÊï∞ÊçÆÊúâÂ
             -§öÂ∞ë
  468   3                  if(*length > fifo_data_length)                                      // Âà§Êñ≠ÈïøÂ∫¶ÊòØÂê¶Ë∂≥Â
             -§ü
  469   3                  {
  470   4                      *length = fifo_data_length;                                     // Á∫†Ê≠£ËØªÂèñÁöÑÈïøÂ∫¶
  471   4                      return_state = FIFO_DATA_NO_ENOUGH;                             // Ê†áÂøóÊï∞ÊçÆ‰∏çÂ§ü
  472   4                      if(0 == fifo_data_length)                                       // Â¶ÇÊûúÊ≤°ÊúâÊï∞ÊçÆ Â∞±
             -Áõ¥Êé•ÈÄÄÂá∫
  473   4                      {
  474   5                          fifo->execution &= ~FIFO_READ;                              // ËØªÊìç‰ΩúÂ§ç‰Ωç
  475   5                          break;
  476   5                      }
  477   4                  }
  478   3      
  479   3                  fifo->execution |= FIFO_READ;                                       // ËØªÊìç‰ΩúÁΩÆ‰Ωç
  480   3                  if((fifo->head > fifo->end) || (fifo->head >= *length))
  481   3                  {
  482   4                      switch(fifo->type)
  483   4                      {
  484   5                          case FIFO_DATA_8BIT:    memcpy(dat, &(((uint8 *)fifo->buffer)[fifo->head - *length]),
             -  (uint16)*length);     break;
  485   5                          case FIFO_DATA_16BIT:   memcpy(dat, &(((uint16 *)fifo->buffer)[fifo->head - *length])
             -, (uint16)(*length * 2));break;
  486   5                          case FIFO_DATA_32BIT:   memcpy(dat, &(((uint32 *)fifo->buffer)[fifo->head - *length])
             -, (uint16)(*length * 4));break;
  487   5                      }
  488   4                  }
  489   3                  else
  490   3                  {
  491   4                      temp_length = *length - fifo->head;                             // ËÆ°ÁÆóÂ∞æÊåáÈíàË∑ùÁ¶ªÁ
             -ºìÂÜ≤Âå∫Â∞æËøòÊúâÂ§öÂ∞ëÁ©∫Èó¥
  492   4                      switch(fifo->type)
  493   4                      {
  494   5                          case FIFO_DATA_8BIT:
  495   5                          {
  496   6                              memcpy(dat, &(((uint8 *)fifo->buffer)[fifo->max - temp_length]), (uint16)temp_len
             -gth);
  497   6                              memcpy(&(((uint8 *)dat)[temp_length]), &(((uint8 *)fifo->buffer)[fifo->head - *le
             -ngth]), (uint16)(*length - temp_length));
  498   6                          }break;
  499   5                          case FIFO_DATA_16BIT:
  500   5                          {
  501   6                              memcpy(dat, &(((uint16 *)fifo->buffer)[fifo->max - temp_length]), temp_length * 2
             -);
  502   6                              memcpy(&(((uint16 *)dat)[temp_length]), &(((uint16 *)fifo->buffer)[fifo->head - *
             -length]), (uint16)((*length - temp_length) * 2));
  503   6                          }break;
  504   5                          case FIFO_DATA_32BIT:
  505   5                          {
C251 COMPILER V5.60.0,  zf_fifo                                                            06/07/25  17:18:00  PAGE 10  

  506   6                              memcpy(dat, &(((uint32 *)fifo->buffer)[fifo->max - temp_length]), temp_length * 4
             -);
  507   6                              memcpy(&(((uint32 *)dat)[temp_length]), &(((uint32 *)fifo->buffer)[fifo->head - *
             -length]), (uint16)((*length - temp_length) * 4));
  508   6                          }break;
  509   5                      }
  510   4                  }
  511   3                  fifo->execution &= ~FIFO_READ;                                      // ËØªÊìç‰ΩúÂ§ç‰Ωç
  512   3              }
  513   2      
  514   2              if(FIFO_READ_AND_CLEAN == flag)                                         // Â¶ÇÊûúÈÄâÊã©ËØªÂèñÂπ∂Ê
             -õ¥Êîπ FIFO Áä∂ÊÄÅ
  515   2              {
  516   3                  if((FIFO_RESET | FIFO_CLEAR | FIFO_READ) == fifo->execution)        // ‰∏çÂú® ÈáçÁΩÆ Ê∏ÖÁ©∫ Ë
             -ØªÂèñ Áä∂ÊÄÅ ÈÅøÂÖçÂºÇÂ∏∏
  517   3                  {
  518   4                      return_state = FIFO_CLEAR_UNDO;                                 // Ê∏ÖÁ©∫Êìç‰ΩúÊú™ÂÆåÊàê
  519   4                      break;
  520   4                  }
  521   3                  fifo_clear(fifo);
  522   3              }
  523   2          }while(0);
  524   1      
  525   1          return return_state;
  526   1      }
  527          
  528          //-------------------------------------------------------------------------------------------------------
             -------------
  529          // ÂáΩÊï∞ÁÆÄ‰ªã     FIFO ÂàùÂßãÂåñ ÊåÇËΩΩÂØπÂ∫îÁºìÂÜ≤Âå∫
  530          // ÂèÇÊï∞ËØ¥Êòé     *fifo               FIFO ÂØπË±°ÊåáÈíà
  531          // ÂèÇÊï∞ËØ¥Êòé     type                FIFO Êï∞ÊçÆ‰ΩçÊï∞
  532          // ÂèÇÊï∞ËØ¥Êòé     *buffer_addr        Ë¶ÅÊåÇËΩΩÁöÑÁºìÂÜ≤Âå∫
  533          // ÂèÇÊï∞ËØ¥Êòé     size                ÁºìÂÜ≤Âå∫Â§ßÂ∞è
  534          // ËøîÂõûÂèÇÊï∞     fifo_state_enum     Êìç‰ΩúÁä∂ÊÄÅ
  535          // ‰ΩøÁî®Á§∫‰æã     fifo_init(&user_fifo, user_buffer, 64);
  536          // Â§áÊ≥®‰ø°ÊÅØ
  537          //-------------------------------------------------------------------------------------------------------
             -------------
  538          fifo_state_enum fifo_init (fifo_struct *fifo, fifo_data_type_enum type, void *buffer_addr, uint32 len)
  539          {
  540   1          //zf_assert(NULL != fifo);
  541   1          fifo_state_enum return_state = FIFO_SUCCESS;
  542   1          do
  543   1          {
  544   2              fifo->buffer      = buffer_addr;
  545   2              fifo->execution   = FIFO_IDLE;
  546   2              fifo->type        = type;
  547   2              fifo->head        = 0;
  548   2              fifo->end         = 0;
  549   2              fifo->reamin_size   = len;
  550   2              fifo->max         = len;
  551   2          }while(0);
  552   1          return return_state;
  553   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      6252     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       130     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
C251 COMPILER V5.60.0,  zf_fifo                                                            06/07/25  17:18:00  PAGE 11  

  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
