C251 COMPILER V5.60.0,  pid                                                                18/07/25  22:42:57  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE pid
OBJECT MODULE PLACED IN .\Out_File\pid.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\pid.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZE
                    -(0,SPEED) BROWSE INCDIR(..\USER\inc;..\USER\src;..\libraries;..\seekfree_libraries;..\seekfree_peripheral) DEBUG PRINT(.
                    -\Out_File\pid.lst) OBJECT(.\Out_File\pid.obj) 

stmt  level    source

    1          #include "pid.h"
    2          
    3          PID_t SpeedPID; //速度PID
    4          PID_t TurnPID;  //位置PID
    5          
    6          float angle_kp = 80.0f, angle_kd = 18.0f;
    7          
    8          void pid_init(PID_t* pid, float kp, float ki, float kd, float i_limit, float o_limit)
    9          {
   10   1              pid->kp = kp;
   11   1              pid->ki = ki;
   12   1              pid->kd = kd;
   13   1      
   14   1              pid->i_limit = i_limit;
   15   1              pid->o_limit = o_limit; 
   16   1              
   17   1              pid->error = 0.0f;
   18   1              pid->lasterror = 0.0f;
   19   1              pid->preverror = 0.0f;
   20   1              pid->interror = 0.0f;
   21   1              
   22   1              pid->p_out = 0.0f;
   23   1              pid->i_out = 0.0f;
   24   1              pid->d_out = 0.0f;
   25   1              pid->output = 0.0f;
   26   1      }
   27          
   28          //位置式PID
   29          float pid_poisitional(PID_t* pid, float real, float target)
   30          {
   31   1              pid->error = target - real;
   32   1              pid->interror += pid->error;
   33   1              
   34   1              //积分限幅
   35   1              if (pid->interror > pid->i_limit)
   36   1              {
   37   2                      pid->interror = pid->i_limit;
   38   2              }
   39   1              else if (pid->interror < -pid->i_limit)
   40   1              {
   41   2                      pid->interror = -pid->i_limit;
   42   2              }
   43   1              
   44   1              //线性、积分、微分、前馈共同作用
   45   1              pid->p_out = pid->kp * pid->error;
   46   1              pid->i_out = pid->ki * pid->interror;
   47   1              pid->d_out = pid->kd * (pid->error - pid->lasterror);
   48   1              
   49   1              pid->output = pid->p_out + pid->i_out + pid->d_out;
   50   1              
   51   1              pid->lasterror = pid->error;
   52   1              
   53   1              //输出限幅
   54   1              if (pid->output > pid->o_limit)
   55   1              {
   56   2                      pid->output = pid->o_limit;
   57   2              }
C251 COMPILER V5.60.0,  pid                                                                18/07/25  22:42:57  PAGE 2   

   58   1              else if (pid->output < -pid->o_limit)
   59   1              {
   60   2                      pid->output = -pid->o_limit;
   61   2              }
   62   1              
   63   1              return pid->output; 
   64   1      }
   65          
   66          //增量式PID
   67          float pid_increment(PID_t* pid, float real, float target)
   68          {
   69   1              pid->error = target - real;
   70   1              
   71   1              pid->p_out = pid->kp * (pid->error - pid->lasterror);
   72   1              pid->i_out = pid->ki * pid->error;
   73   1              pid->d_out = pid->kd * (pid->error - 2 * pid->lasterror + pid->preverror);
   74   1      
   75   1              pid->output += pid->p_out + pid->i_out + pid->d_out;
   76   1              
   77   1              pid->preverror = pid->lasterror;
   78   1              pid->lasterror = pid->error;
   79   1              
   80   1              if (pid->output > pid->o_limit)
   81   1              {
   82   2                      pid->output = pid->o_limit;
   83   2              }
   84   1              else if (pid->output < -pid->o_limit)
   85   1              {
   86   2                      pid->output = -pid->o_limit;
   87   2              }
   88   1              
   89   1              return pid->output;
   90   1      }
   91          
   92          //转向环pid
   93          float pid_poisitional_turnning(PID_t* pid, float position, float GyroZ)
   94          {
   95   1              pid->p_out = pid->kp * position;
   96   1              pid->d_out = pid->kd * GyroZ;
   97   1      
   98   1              pid->output = pid->p_out + pid->d_out;
   99   1              pid->lasterror = position;
  100   1              
  101   1              //输出限幅
  102   1              if (pid->output > pid->o_limit)
  103   1              {
  104   2                      pid->output = pid->o_limit;
  105   2              }
  106   1              else if (pid->output < -pid->o_limit)
  107   1              {
  108   2                      pid->output = -pid->o_limit;
  109   2              }
  110   1              
  111   1              return pid->output;
  112   1      }
  113          
  114          void pid_set(PID_t* pid, float kp, float ki, float kd)
  115          {
  116   1              pid->kp = kp;
  117   1              pid->ki = ki;
  118   1              pid->kd = kd;
  119   1      }
  120          
  121          void pid_clean(PID_t* pid)
  122          {
  123   1              pid->lasterror = 0;
C251 COMPILER V5.60.0,  pid                                                                18/07/25  22:42:57  PAGE 3   

  124   1              pid->interror = 0;
  125   1              pid->preverror = 0;
  126   1              pid->output = 0;
  127   1      }
  128          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2633     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       192     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        18     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
