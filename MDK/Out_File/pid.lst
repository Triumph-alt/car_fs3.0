C251 COMPILER V5.60.0,  pid                                                                06/07/25  15:53:08  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE pid
OBJECT MODULE PLACED IN .\Out_File\pid.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\pid.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZE
                    -(0,SPEED) BROWSE INCDIR(..\USER\inc;..\USER\src;..\libraries;..\seekfree_libraries;..\seekfree_peripheral) DEBUG PRINT(.
                    -\Out_File\pid.lst) TABS(2) OBJECT(.\Out_File\pid.obj) 

stmt  level    source

    1          #include "pid.h"
    2          
    3          PID_t SpeedPID; //速度PID
    4          PID_t TurnPID;  //位置PID
    5          
    6          void pid_init(PID_t* pid, float kp, float ki, float kd, float i_limit, float o_limit)
    7          {
    8   1        pid->kp = kp;
    9   1        pid->ki = ki;
   10   1        pid->kd = kd;
   11   1      
   12   1        pid->i_limit = i_limit;
   13   1        pid->o_limit = o_limit; 
   14   1        
   15   1        pid->error = 0.0f;
   16   1        pid->lasterror = 0.0f;
   17   1        pid->preverror = 0.0f;
   18   1        pid->interror = 0.0f;
   19   1        
   20   1        pid->p_out = 0.0f;
   21   1        pid->i_out = 0.0f;
   22   1        pid->d_out = 0.0f;
   23   1        pid->output = 0.0f;
   24   1      }
   25          
   26          //位置式PID
   27          float pid_poisitional(PID_t* pid, float real, float target)
   28          {
   29   1        pid->error = target - real;
   30   1        pid->interror += pid->error;
   31   1        
   32   1        //积分限幅
   33   1        if (pid->interror > pid->i_limit)
   34   1        {
   35   2          pid->interror = pid->i_limit;
   36   2        }
   37   1        else if (pid->interror < -pid->i_limit)
   38   1        {
   39   2          pid->interror = -pid->i_limit;
   40   2        }
   41   1        
   42   1        //线性、积分、微分、前馈共同作用
   43   1        pid->p_out = pid->kp * pid->error;
   44   1        pid->i_out = pid->ki * pid->interror;
   45   1        pid->d_out = pid->kd * (pid->error - pid->lasterror);
   46   1        
   47   1        pid->output = pid->p_out + pid->i_out + pid->d_out;
   48   1        
   49   1        pid->lasterror = pid->error;
   50   1        
   51   1        //输出限幅
   52   1        if (pid->output > pid->o_limit)
   53   1        {
   54   2          pid->output = pid->o_limit;
   55   2        }
   56   1        else if (pid->output < -pid->o_limit)
   57   1        {
C251 COMPILER V5.60.0,  pid                                                                06/07/25  15:53:08  PAGE 2   

   58   2          pid->output = -pid->o_limit;
   59   2        }
   60   1        
   61   1        return pid->output; 
   62   1      }
   63          
   64          //增量式PID（带前馈）
   65          float pid_increment(PID_t* pid, float real, float target)
   66          {
   67   1        pid->error = target - real;
   68   1        
   69   1        pid->p_out = pid->kp * (pid->error - pid->lasterror);
   70   1        pid->i_out = pid->ki * pid->error;
   71   1        pid->d_out = pid->kd * (pid->error - 2 * pid->lasterror + pid->preverror);
   72   1      
   73   1        pid->output += pid->p_out + pid->i_out + pid->d_out;
   74   1        
   75   1        pid->preverror = pid->lasterror;
   76   1        pid->lasterror = pid->error;
   77   1        
   78   1        if (pid->output > pid->o_limit)
   79   1        {
   80   2          pid->output = pid->o_limit;
   81   2        }
   82   1        else if (pid->output < -pid->o_limit)
   83   1        {
   84   2          pid->output = -pid->o_limit;
   85   2        }
   86   1        
   87   1        return pid->output;
   88   1      }
   89          
   90          //转向环pid（加二次项）
   91          float pid_poisitional_turnning(PID_t* pid, float position, float GyroZ)
   92          {
   93   1        pid->p_out = pid->kp * position;
   94   1        pid->d_out = pid->kd * GyroZ;
   95   1      
   96   1        pid->output = pid->p_out + pid->d_out;
   97   1        pid->lasterror = position;
   98   1        
   99   1        //输出限幅
  100   1        if (pid->output > pid->o_limit)
  101   1        {
  102   2          pid->output = pid->o_limit;
  103   2        }
  104   1        else if (pid->output < -pid->o_limit)
  105   1        {
  106   2          pid->output = -pid->o_limit;
  107   2        }
  108   1        
  109   1        return pid->output;
  110   1      }
  111          
  112          void pid_set(PID_t* pid, float kp, float ki, float kd)
  113          {
  114   1        pid->kp = kp;
  115   1        pid->ki = ki;
  116   1        pid->kd = kd;
  117   1      }
  118          
  119          void pid_clean(PID_t* pid)
  120          {
  121   1        pid->lasterror = 0;
  122   1        pid->interror = 0;
  123   1        pid->preverror = 0;
C251 COMPILER V5.60.0,  pid                                                                06/07/25  15:53:08  PAGE 3   

  124   1        pid->output = 0;
  125   1      }
  126          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2633     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       184     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
