C251 COMPILER V5.60.0,  pid                                                                14/07/25  14:27:43  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE pid
OBJECT MODULE PLACED IN .\Out_File\pid.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\pid.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZE
                    -(0,SPEED) BROWSE INCDIR(..\USER\inc;..\USER\src;..\libraries;..\seekfree_libraries;..\seekfree_peripheral) DEBUG PRINT(.
                    -\Out_File\pid.lst) OBJECT(.\Out_File\pid.obj) 

stmt  level    source

    1          #include "pid.h"
    2          #include "fixed_point.h"
    3          
    4          PID_t SpeedPID; //速度PID
    5          PID_t TurnPID;  //位置PID
    6          
    7          void pid_init(PID_t* pid, float kp, float ki, float kd, float i_limit, float o_limit)
    8          {
    9   1              // 参数转换为定点并保存
   10   1              pid->kp = FLOAT_TO_FIXED(kp);
   11   1              pid->ki = FLOAT_TO_FIXED(ki);
   12   1              pid->kd = FLOAT_TO_FIXED(kd);
   13   1      
   14   1              pid->i_limit = FLOAT_TO_FIXED(i_limit);
   15   1              pid->o_limit = FLOAT_TO_FIXED(o_limit);
   16   1      
   17   1              // 状态变量清零
   18   1              pid->error = 0;
   19   1              pid->lasterror = 0;
   20   1              pid->preverror = 0;
   21   1              pid->interror = 0;
   22   1      
   23   1              pid->p_out = 0;
   24   1              pid->i_out = 0;
   25   1              pid->d_out = 0;
   26   1              pid->output = 0;
   27   1      }
   28          
   29          // 位置式 PID（速度环等） -- 定点实现
   30          int32_t pid_poisitional(PID_t* pid, int32_t real, int32_t target)
   31          {
   32   1              // 误差与积分
   33   1              pid->error = target - real;
   34   1              pid->interror += pid->error;
   35   1      
   36   1              // 积分限幅
   37   1              if (pid->interror > pid->i_limit)
   38   1                      pid->interror = pid->i_limit;
   39   1              else if (pid->interror < -pid->i_limit)
   40   1                      pid->interror = -pid->i_limit;
   41   1      
   42   1              // P I D 计算
   43   1              pid->p_out = FIXED_MUL(pid->kp, pid->error);
   44   1              pid->i_out = FIXED_MUL(pid->ki, pid->interror);
   45   1              pid->d_out = FIXED_MUL(pid->kd, (pid->error - pid->lasterror));
   46   1      
   47   1              pid->output = pid->p_out + pid->i_out + pid->d_out;
   48   1      
   49   1              pid->lasterror = pid->error;
   50   1      
   51   1              // 输出限幅
   52   1              if (pid->output > pid->o_limit)
   53   1                      pid->output = pid->o_limit;
   54   1              else if (pid->output < -pid->o_limit)
   55   1                      pid->output = -pid->o_limit;
   56   1      
   57   1              return pid->output;
C251 COMPILER V5.60.0,  pid                                                                14/07/25  14:27:43  PAGE 2   

   58   1      }
   59          
   60          //增量式PID
   61          int32_t pid_increment(PID_t* pid, int32_t real, int32_t target)
   62          {
   63   1              int32_t diff = 0;
   64   1              
   65   1          // 当前误差
   66   1          pid->error = target - real;
   67   1      
   68   1          // ΔP = Kp * (e(k) - e(k-1))
   69   1          pid->p_out = FIXED_MUL(pid->kp, (pid->error - pid->lasterror));
   70   1      
   71   1          // ΔI = Ki * e(k)
   72   1          pid->i_out = FIXED_MUL(pid->ki, pid->error);
   73   1      
   74   1          // ΔD = Kd * (e(k) - 2e(k-1) + e(k-2))
   75   1          diff = pid->error - (pid->lasterror << 1) + pid->preverror;
   76   1          pid->d_out = FIXED_MUL(pid->kd, diff);
   77   1      
   78   1          pid->output += pid->p_out + pid->i_out + pid->d_out;
   79   1      
   80   1          // 保存历史误差
   81   1          pid->preverror = pid->lasterror;
   82   1          pid->lasterror = pid->error;
   83   1      
   84   1          // 输出限幅
   85   1          if (pid->output > pid->o_limit)
   86   1          {
   87   2              pid->output = pid->o_limit;
   88   2          }
   89   1          else if (pid->output < -pid->o_limit)
   90   1          {
   91   2              pid->output = -pid->o_limit;
   92   2          }
   93   1      
   94   1          return pid->output;
   95   1      }
   96          
   97          //转向环pid
   98          int32_t pid_positional_turning(PID_t* pid, int32_t position, int32_t GyroZ)
   99          {
  100   1          // P = Kp * 位置误差  (此处位置本身就是误差值)
  101   1          pid->p_out = FIXED_MUL(pid->kp, position);
  102   1      
  103   1          // D = Kd * 角速度  (GyroZ)
  104   1          pid->d_out = FIXED_MUL(pid->kd, GyroZ);
  105   1      
  106   1          pid->output = pid->p_out + pid->d_out;
  107   1      
  108   1          // 输出限幅
  109   1          if (pid->output > pid->o_limit)
  110   1          {
  111   2              pid->output = pid->o_limit;
  112   2          }
  113   1          else if (pid->output < -pid->o_limit)
  114   1          {
  115   2              pid->output = -pid->o_limit;
  116   2          }
  117   1      
  118   1          // 记录上次误差（这里使用位置作为误差量）
  119   1          pid->lasterror = position;
  120   1      
  121   1          return pid->output;
  122   1      }
  123          
C251 COMPILER V5.60.0,  pid                                                                14/07/25  14:27:43  PAGE 3   

  124          void pid_set(PID_t* pid, float kp, float ki, float kd)
  125          {
  126   1              pid->kp = FLOAT_TO_FIXED(kp);
  127   1              pid->ki = FLOAT_TO_FIXED(ki);
  128   1              pid->kd = FLOAT_TO_FIXED(kd);
  129   1      }
  130          
  131          void pid_clean(PID_t* pid)
  132          {
  133   1              pid->lasterror = 0;
  134   1              pid->interror = 0;
  135   1              pid->preverror = 0;
  136   1              pid->output = 0;
  137   1      }
  138          
  139          // 全定点数版本转向环 PID
  140          int32_t pid_positional_turning_fixed(PID_t* pid, int32_t position, int32_t gyro_z_fixed)
  141          {
  142   1          // 变量声明区
  143   1          int32_t output = 0;
  144   1      
  145   1          // 直接使用位置误差作为P项输入
  146   1          pid->p_out = FIXED_MUL(pid->kp, position);
  147   1      
  148   1          // 使用角速度（已为定点数，单位 °/s * FX_SCALE）作为D项输入
  149   1          pid->d_out = FIXED_MUL(pid->kd, gyro_z_fixed);
  150   1      
  151   1          // 转向环通常不需要积分项，保持为0
  152   1          pid->i_out = 0;
  153   1      
  154   1          output = pid->p_out + pid->d_out;
  155   1      
  156   1          // 输出限幅
  157   1          if (output > pid->o_limit)
  158   1          {
  159   2              output = pid->o_limit;
  160   2          }
  161   1          else if (output < -pid->o_limit)
  162   1          {
  163   2              output = -pid->o_limit;
  164   2          }
  165   1      
  166   1          pid->output = output;
  167   1      
  168   1          // 保存误差（位置即误差）
  169   1          pid->lasterror = position;
  170   1      
  171   1          return output;
  172   1      }
  173          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      3537     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       204     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
C251 COMPILER V5.60.0,  pid                                                                14/07/25  14:27:43  PAGE 4   

  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
