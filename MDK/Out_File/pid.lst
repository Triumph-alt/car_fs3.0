C251 COMPILER V5.60.0,  pid                                                                19/07/25  22:33:46  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE pid
OBJECT MODULE PLACED IN .\Out_File\pid.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\pid.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZE
                    -(0,SPEED) BROWSE INCDIR(..\USER\inc;..\USER\src;..\libraries;..\seekfree_libraries;..\seekfree_peripheral) DEBUG PRINT(.
                    -\Out_File\pid.lst) OBJECT(.\Out_File\pid.obj) 

stmt  level    source

    1          #include "pid.h"
    2          
    3          PID_t SpeedPID; //速度PID
    4          PID_t TurnPID;  //位置PID
    5          
    6          float speed_kp = 55.0f, speed_ki = 0.12f;
    7          float turn_kp = 80.0f, turn_kd = 16.0f;
    8          float angle_kp = 80.0f, angle_kd = 18.0f;
    9          
   10          void pid_init(PID_t* pid, float kp, float ki, float kd, float i_limit, float o_limit)
   11          {
   12   1              pid->kp = kp;
   13   1              pid->ki = ki;
   14   1              pid->kd = kd;
   15   1      
   16   1              pid->i_limit = i_limit;
   17   1              pid->o_limit = o_limit; 
   18   1              
   19   1              pid->error = 0.0f;
   20   1              pid->lasterror = 0.0f;
   21   1              pid->preverror = 0.0f;
   22   1              pid->interror = 0.0f;
   23   1              
   24   1              pid->p_out = 0.0f;
   25   1              pid->i_out = 0.0f;
   26   1              pid->d_out = 0.0f;
   27   1              pid->output = 0.0f;
   28   1      }
   29          
   30          //位置式PID
   31          float pid_poisitional(PID_t* pid, float real, float target)
   32          {
   33   1              pid->error = target - real;
   34   1              pid->interror += pid->error;
   35   1              
   36   1              //积分限幅
   37   1              if (pid->interror > pid->i_limit)
   38   1              {
   39   2                      pid->interror = pid->i_limit;
   40   2              }
   41   1              else if (pid->interror < -pid->i_limit)
   42   1              {
   43   2                      pid->interror = -pid->i_limit;
   44   2              }
   45   1              
   46   1              //线性、积分、微分、前馈共同作用
   47   1              pid->p_out = pid->kp * pid->error;
   48   1              pid->i_out = pid->ki * pid->interror;
   49   1              pid->d_out = pid->kd * (pid->error - pid->lasterror);
   50   1              
   51   1              pid->output = pid->p_out + pid->i_out + pid->d_out;
   52   1              
   53   1              pid->lasterror = pid->error;
   54   1              
   55   1              //输出限幅
   56   1              if (pid->output > pid->o_limit)
   57   1              {
C251 COMPILER V5.60.0,  pid                                                                19/07/25  22:33:46  PAGE 2   

   58   2                      pid->output = pid->o_limit;
   59   2              }
   60   1              else if (pid->output < -pid->o_limit)
   61   1              {
   62   2                      pid->output = -pid->o_limit;
   63   2              }
   64   1              
   65   1              return pid->output; 
   66   1      }
   67          
   68          //增量式PID
   69          float pid_increment(PID_t* pid, float real, float target)
   70          {
   71   1              pid->error = target - real;
   72   1              
   73   1              pid->p_out = pid->kp * (pid->error - pid->lasterror);
   74   1              pid->i_out = pid->ki * pid->error;
   75   1              pid->d_out = pid->kd * (pid->error - 2 * pid->lasterror + pid->preverror);
   76   1      
   77   1              pid->output += pid->p_out + pid->i_out + pid->d_out;
   78   1              
   79   1              pid->preverror = pid->lasterror;
   80   1              pid->lasterror = pid->error;
   81   1              
   82   1              if (pid->output > pid->o_limit)
   83   1              {
   84   2                      pid->output = pid->o_limit;
   85   2              }
   86   1              else if (pid->output < -pid->o_limit)
   87   1              {
   88   2                      pid->output = -pid->o_limit;
   89   2              }
   90   1              
   91   1              return pid->output;
   92   1      }
   93          
   94          //转向环pid
   95          float pid_poisitional_turnning(PID_t* pid, float position, float GyroZ)
   96          {
   97   1              pid->p_out = pid->kp * position;
   98   1              pid->d_out = pid->kd * GyroZ;
   99   1      
  100   1              pid->output = pid->p_out + pid->d_out;
  101   1              pid->lasterror = position;
  102   1              
  103   1              //输出限幅
  104   1              if (pid->output > pid->o_limit)
  105   1              {
  106   2                      pid->output = pid->o_limit;
  107   2              }
  108   1              else if (pid->output < -pid->o_limit)
  109   1              {
  110   2                      pid->output = -pid->o_limit;
  111   2              }
  112   1              
  113   1              return pid->output;
  114   1      }
  115          
  116          void pid_set(PID_t* pid, float kp, float ki, float kd)
  117          {
  118   1              pid->kp = kp;
  119   1              pid->ki = ki;
  120   1              pid->kd = kd;
  121   1      }
  122          
  123          void pid_clean(PID_t* pid)
C251 COMPILER V5.60.0,  pid                                                                19/07/25  22:33:46  PAGE 3   

  124          {
  125   1              pid->lasterror = 0;
  126   1              pid->interror = 0;
  127   1              pid->preverror = 0;
  128   1              pid->output = 0;
  129   1      }
  130          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2633     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       208     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        54     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
