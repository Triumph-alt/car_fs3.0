C251 COMPILER V5.60.0,  filter                                                             06/07/25  11:17:04  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE filter
OBJECT MODULE PLACED IN .\Out_File\filter.obj
COMPILER INVOKED BY: D:\keil5\C251\BIN\C251.EXE ..\USER\src\filter.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BROWS
                    -E INCDIR(..\USER\inc;..\USER\src;..\libraries;..\seekfree_libraries;..\seekfree_peripheral) DEBUG PRINT(.\Out_File\filte
                    -r.lst) OBJECT(.\Out_File\filter.obj) 

stmt  level    source

    1          #include "filter.h"
    2          
    3          const float imu693kf_Q = 0.17;
    4          const float imu693kf_R = 0.20;
    5          
    6          KalmanFilter imu693_kf;
    7          
    8          LowPassFilter leftSpeedFilt;
    9          LowPassFilter rightSpeedFilt;
   10          
   11          void kalman_init(KalmanFilter* kf, float F, float B, float Q, float R, float initial_x)
   12          {
   13   1          kf->F = F;
   14   1          kf->B = B;
   15   1          kf->Q = Q;
   16   1          kf->R = R;
   17   1          kf->P = 1.0;       // 初始协方差
   18   1          kf->x = initial_x;
   19   1      }
   20          
   21          void kalman_predict(KalmanFilter* kf, float u)
   22          {
   23   1          kf->x = kf->F * kf->x + kf->B * u;
   24   1          kf->P = kf->F * kf->P * kf->F + kf->Q;
   25   1      }
   26          
   27          float kalman_update(KalmanFilter* kf, float z)
   28          {
   29   1          kf->K = kf->P / (kf->P + kf->R);
   30   1          kf->x += kf->K * (z - kf->x);
   31   1          kf->P *= (1 - kf->K);
   32   1          return kf->x;
   33   1      }
   34          
   35          void lowpass_init(LowPassFilter* instance, float alpha)
   36          {
   37   1              instance->alpha = alpha;
   38   1              instance->output = 0;
   39   1              instance->lastoutput = 0;
   40   1      }
   41          
   42          float lowpass_filter(LowPassFilter* instance, float input) 
   43          {
   44   1          // 实现一阶低通滤波的核心算法
   45   1          instance->output = instance->alpha * input + (1 - instance->alpha) * instance->lastoutput;
   46   1          
   47   1          // 更新上一时刻的输入值
   48   1          instance->lastoutput = instance->output;
   49   1          
   50   1          return instance->output;
   51   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1003     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
C251 COMPILER V5.60.0,  filter                                                             06/07/25  11:17:04  PAGE 2   

  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       108     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         8     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
