C251 COMPILER V5.60.0,  filter                                                             14/07/25  14:27:41  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE filter
OBJECT MODULE PLACED IN .\Out_File\filter.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\filter.c LARGE INTR2 WARNINGLEVEL(3) OPTIM
                    -IZE(0,SPEED) BROWSE INCDIR(..\USER\inc;..\USER\src;..\libraries;..\seekfree_libraries;..\seekfree_peripheral) DEBUG PRIN
                    -T(.\Out_File\filter.lst) OBJECT(.\Out_File\filter.obj) 

stmt  level    source

    1          #include "filter.h"
    2          #include "fixed_point.h"
    3          
    4          // const float imu693kf_Q = 0.17;
    5          // const float imu693kf_R = 0.20;
    6          
    7          // KalmanFilter imu693_kf;
    8          
    9          FixedLowPassFilter leftSpeedFilt, rightSpeedFilt, gyro_z_filt; // 定点数低通滤波器
   10          
   11          //---------------------------------------卡尔曼滤波-------------------------------------------------
             --------
   12          void kalman_init(KalmanFilter* kf, float F, float B, float Q, float R, float initial_x)
   13          {
   14   1          kf->F = F;
   15   1          kf->B = B;
   16   1          kf->Q = Q;
   17   1          kf->R = R;
   18   1          kf->P = 1.0;       // 初始协方差
   19   1          kf->x = initial_x;
   20   1      }
   21          
   22          void kalman_predict(KalmanFilter* kf, float u)
   23          {
   24   1          kf->x = kf->F * kf->x + kf->B * u;
   25   1          kf->P = kf->F * kf->P * kf->F + kf->Q;
   26   1      }
   27          
   28          float kalman_update(KalmanFilter* kf, float z)
   29          {
   30   1          kf->K = kf->P / (kf->P + kf->R);
   31   1          kf->x += kf->K * (z - kf->x);
   32   1          kf->P *= (1 - kf->K);
   33   1          return kf->x;
   34   1      }
   35          
   36          //---------------------------------------浮点数低通滤波-------------------------------------------
             --------------
   37          
   38          void lowpass_init(LowPassFilter* instance, float alpha)
   39          {
   40   1              instance->alpha = alpha;
   41   1              instance->output = 0;
   42   1              instance->lastoutput = 0;
   43   1      }
   44          
   45          float lowpass_filter(LowPassFilter* instance, float input) 
   46          {
   47   1          // 实现一阶低通滤波的核心算法
   48   1          instance->output = instance->alpha * input + (1 - instance->alpha) * instance->lastoutput;
   49   1          
   50   1          // 更新上一时刻的输入值
   51   1          instance->lastoutput = instance->output;
   52   1          
   53   1          return instance->output;
   54   1      }
   55          
C251 COMPILER V5.60.0,  filter                                                             14/07/25  14:27:41  PAGE 2   

   56          //---------------------------------------定点数低通滤波-------------------------------------------
             --------------
   57          /**
   58           * @brief  初始化定点数一阶低通滤波器
   59           * @param  instance      滤波器实例指针
   60           * @param  alpha_fixed   滤波系数α，范围 0~FX_SCALE (放大 FX_SCALE 倍的整数)
   61           *                       值越小，滤波越强；值越大，输出更跟随输入
   62           */
   63          void fixed_lowpass_init(FixedLowPassFilter* instance, int32_t alpha_fixed)
   64          {
   65   1          // 变量声明区
   66   1          // alpha_fixed 应在 0~FX_SCALE 之间
   67   1          if(alpha_fixed < 0) {
   68   2              alpha_fixed = 0;
   69   2          } else if(alpha_fixed > FX_SCALE) {
   70   2              alpha_fixed = FX_SCALE;
   71   2          }
   72   1          instance->alpha = alpha_fixed;
   73   1          instance->output = 0;
   74   1          instance->last_output = 0;
   75   1      }
   76          
   77          /**
   78           * @brief  定点数一阶低通滤波核心函数
   79           * @param  instance      已初始化的滤波器实例
   80           * @param  input_fixed   当前输入值 (已放大 FX_SCALE 倍的定点数)
   81           * @return int32_t       滤波后输出值 (定点数)
   82           *
   83           * y(n) = α·x(n) + (1-α)·y(n-1)
   84           */
   85          int32_t fixed_lowpass_filter(FixedLowPassFilter* instance, int32_t input_fixed)
   86          {
   87   1          // 变量声明区
   88   1          int32_t temp_output = 0;
   89   1      
   90   1          // y(n) = α·x(n) + (1-α)·y(n-1)
   91   1          temp_output = (int32_t)((instance->alpha * input_fixed + (FX_SCALE - instance->alpha) * instance->las
             -t_output ) / FX_SCALE);
   92   1      
   93   1          instance->output = temp_output;
   94   1          instance->last_output = temp_output;
   95   1      
   96   1          return temp_output;
   97   1      }
   98          
   99          //---------------------------------------编码器定点数低通滤波----------------------------------
             -----------------------
  100          
  101          /**
  102           * @brief  编码器速度定点低通滤波器初始化 (浮点 α 转定点)
  103           * @param  instance     定点滤波器实例指针
  104           * @param  alpha_float  滤波系数 α (0~1 浮点)
  105           */
  106          void encoder_lowpass_init(FixedLowPassFilter* instance, float alpha_float)
  107          {
  108   1          // 将浮点 alpha 转为定点
  109   1          int32_t alpha_fixed = FLOAT_TO_FIXED(alpha_float);
  110   1          fixed_lowpass_init(instance, alpha_fixed);
  111   1      }
  112          
  113          /**
  114           * @brief  编码器速度定点低通滤波函数
  115           * @param  instance     已初始化的定点滤波器实例
  116           * @param  input_int    编码器原始速度值 (普通整数)
  117           * @return int32_t      滤波后速度值 (普通整数)
  118           */
C251 COMPILER V5.60.0,  filter                                                             14/07/25  14:27:41  PAGE 3   

  119          int32_t encoder_lowpass_filter(FixedLowPassFilter* instance, int32_t input_int)
  120          {
  121   1          int32_t input_fixed = INT_TO_FIXED(input_int);
  122   1          int32_t output_fixed = fixed_lowpass_filter(instance, input_fixed);
  123   1          return output_fixed / FX_SCALE;   // 转回普通整数速度值
  124   1      }
  125          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1568     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       140     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
