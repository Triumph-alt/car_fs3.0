C251 COMPILER V5.60.0,  main                                                               06/07/25  11:17:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Out_File\main.obj
COMPILER INVOKED BY: D:\keil5\C251\BIN\C251.EXE ..\USER\src\main.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BROWSE 
                    -INCDIR(..\USER\inc;..\USER\src;..\libraries;..\seekfree_libraries;..\seekfree_peripheral) DEBUG PRINT(.\Out_File\main.ls
                    -t) OBJECT(.\Out_File\main.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          
    3          /*
    4           * 系统频率，可查看board.h中的 FOSC 宏定义修改。
    5           * board.h文件中FOSC的值设置为0,则程序自动设置系统频率为33.1776MHZ
    6           * 在board_init中,已经将P54引脚设置为复位
    7           * 如果需要使用P54引脚,可以在board.c文件中的board_init()函数中删除SET_P54_RESRT即可
    8           */
    9          void main(void)
   10          {
   11   1              int state = 5;
   12   1              uint16 sum_value = 0;    
   13   1              uint16 value[7] = {0};   //调试用数组
   14   1              
   15   1              board_init();                    // 初始化寄存器,勿删除此句代码
   16   1              
   17   1              electromagnetic_init();  //初始化电磁传感器
   18   1              
   19   1              iic_init(IIC_2, IIC2_SCL_P25, IIC2_SDA_P24, 0);
   20   1              uart_init(UART_4, UART4_RX_P02, UART4_TX_P03, 115200, TIM_4);
   21   1              
   22   1              motor_init();
   23   1              encoder_init();
   24   1              
   25   1              imu963ra_init();
   26   1              oled_init();
   27   1      
   28   1              pid_init(&SpeedPID, 0.0f, 0.0f, 0.0f, 5000.0f, 6000.0f); //初始化速度PID
   29   1              pid_init(&TurnPID, 0.0f, 0.0f, 0.0f, 0.0f, 6000.0f);  //初始化位置PID
   30   1              
   31   1              lowpass_init(&leftSpeedFilt, 0.556);   //初始化低通滤波器
   32   1              lowpass_init(&rightSpeedFilt, 0.556);
   33   1              
   34   1              kalman_init(&imu693_kf, 0.98, 0.02, imu693kf_Q, imu693kf_R, 0.0);
   35   1              
   36   1              pit_timer_ms(TIM_1, 10);
   37   1              pit_timer_ms(TIM_2, 5);
   38   1              
   39   1          while(1)
   40   1              {
   41   2                      key_task();         // 处理按键任务
   42   2                      display_task();     // OLED显示任务
   43   2                      
   44   2                      uart4_recv_task();  // 串口4接收任务
   45   2                      
   46   2      //              sprintf(g_TxData, "%f,%f\n",Gyro_Z,filtered_GyroZ);
   47   2      //              uart_putstr(UART_4, g_TxData);
   48   2                      
   49   2      #if 0
                               // 通过串口输出七电感数据
                               sprintf(g_TxData, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
                                (uint16)normalized_data[SENSOR_HL], 
                                (uint16)normalized_data[SENSOR_VL], 
                                (uint16)normalized_data[SENSOR_HML], 
                                (uint16)normalized_data[SENSOR_HC],
                                (uint16)normalized_data[SENSOR_HMR], 
                                (uint16)normalized_data[SENSOR_VR], 
C251 COMPILER V5.60.0,  main                                                               06/07/25  11:17:02  PAGE 2   

                                (uint16)normalized_data[SENSOR_HR], 
                                 position,
                                (uint16)signal_strength_value,
                                 track_type,
                                 track_route,
                                 track_route_status,
                                 track_type_zj);
                                uart_putstr(UART_4, g_TxData);
               #endif
   67   2      
   68   2                      // 获取滤波后的ADC数据          
   69   2                      mid_filter();      // 使用中位值滤波获取电感数据
   70   2      
   71   2                      // 归一化电感数组・
   72   2                      normalize_sensors();
   73   2                      
   74   2                      // 计算位置偏差
   75   2                      position = calculate_position_improved();
   76   2                      
   77   2                      //检查电磁保护
   78   2                      protection_flag = check_electromagnetic_protection();
   79   2                      
   80   2                      
   81   2                      /* 调试功能 */
   82   2      #if 0
                               //读取七电感ADC值（用于调试）
                               value[0] = adc_once(ADC_HL,  ADC_10BIT);
                               value[1] = adc_once(ADC_VL,  ADC_10BIT);
                               value[2] = adc_once(ADC_HML, ADC_10BIT);
                               value[3] = adc_once(ADC_HC,  ADC_10BIT); 
                               value[4] = adc_once(ADC_HMR, ADC_10BIT);
                               value[5] = adc_once(ADC_VR,  ADC_10BIT);
                               value[6] = adc_once(ADC_HR,  ADC_10BIT);        
               
                               // 计算所有电感值的总和
               //              sum_value = (uint16)normalized_data[SENSOR_HL] + (uint16)normalized_data[SENSOR_VL] + 
               //                          (uint16)normalized_data[SENSOR_HML] + (uint16)normalized_data[SENSOR_HC] + 
               //                          (uint16)normalized_data[SENSOR_HMR] + (uint16)normalized_data[SENSOR_VR] + 
               //                          (uint16)normalized_data[SENSOR_HR];
               
                                // 通过串口输出七电感原始数据
                                 sprintf(g_TxData, "%d,%d,%d,%d,%d,%d,%d\n",
                                                       value[0], 
                                                       value[1], 
                                                       value[2], 
                                                       value[3], 
                                                       value[4],
                                                       value[5],
                         value[6]);
                                 uart_putstr(UART_4, g_TxData);
               
                                 delay_ms(5);
               #endif  
  111   2                      
  112   2          }
  113   1      }
  114          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       498     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        18     ------
C251 COMPILER V5.60.0,  main                                                               06/07/25  11:17:02  PAGE 3   

  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        16     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
