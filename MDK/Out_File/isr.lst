C251 COMPILER V5.60.0,  isr                                                                19/07/25  22:37:10  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE isr
OBJECT MODULE PLACED IN .\Out_File\isr.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\isr.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZE
                    -(0,SPEED) BROWSE INCDIR(..\USER\inc;..\USER\src;..\libraries;..\seekfree_libraries;..\seekfree_peripheral) DEBUG PRINT(.
                    -\Out_File\isr.lst) OBJECT(.\Out_File\isr.obj) 

stmt  level    source

    1          ///******************************************************************************************************
             -***************
    2          // * COPYRIGHT NOTICE
    3          // * Copyright (c) 2020,ÈÄêÈ£ûÁßëÊäÄ
    4          // * All rights reserved.
    5          // * ÊäÄÊúØËÆ®ËÆ∫QQÁæ§Ôºö‰∏ÄÁæ§Ôºö179029047(Â∑≤Êª°)  ‰∫åÁæ§Ôºö244861897(Â∑≤Êª°)  ‰∏âÁæ§Ôºö824575535
    6          // *
    7          // * ‰ª•‰∏ãÊâÄÊúâÂÜÖÂÆπÁâàÊùÉÂùáÂ±ûÈÄêÈ£ûÁßëÊäÄÊâÄÊúâÔºåÊú™ÁªèÂÖÅËÆ∏‰∏çÂæóÁî®‰∫éÂïÜ‰∏öÁî®ÈÄîÔºå
    8          // * Ê¨¢ËøéÂêÑ‰Ωç‰ΩøÁî®Âπ∂‰º†Êí≠Êú¨Á®ãÂ∫èÔºå‰øÆÊîπÂÜÖÂÆπÊó∂ÂøÖÈ°ª‰øùÁïôÈÄêÈ£ûÁßëÊäÄÁöÑÁâàÊùÉÂ£∞Êòé„ÄÇ
    9          // *
   10          // * @file                      isr
   11          // * @company                   ÊàêÈÉΩÈÄêÈ£ûÁßëÊäÄÊúâÈôêÂÖ¨Âè∏
   12          // * @author                    ÈÄêÈ£ûÁßëÊäÄ(QQ790875685)
   13          // * @version                   Êü•ÁúãdocÂÜÖversionÊñá‰ª∂ ÁâàÊú¨ËØ¥Êòé
   14          // * @Software                  MDK FOR C251 V5.60
   15          // * @Target core               STC32G12K128
   16          // * @Taobao                    https://seekfree.taobao.com/
   17          // * @date                      2020-4-14
   18          // ******************************************************************************************************
             -**************/
   19          #include "headfile.h"
   20          #include "zf_nvic.h"
   21          // #include "zf_exti.h"
   22          #include "zf_uart.h"
   23          #include "zf_tim.h"
   24          
   25          uint8_t SPEED_STRAIGHT = 35, SPEED_ISLAND = 35; //ÈÄüÂ∫¶ÁéØÁõÆÊ†áÈÄüÂ∫¶
   26          
   27          int g_encoder_average = 0;                       //Â∑¶Âè≥ÁºñÁ†ÅÂô®ÁöÑÂπ≥ÂùáÂÄº
   28          float Gyro_Z = 0, filtered_GyroZ = 0;            // ÈôÄËû∫‰ª™ËßíÈÄüÂ∫¶ÁöÑÂéüÂßãÂÄºÂíåÂç°Â∞îÊõºÊª§Ê≥¢‰πãÂê
             -éÁöÑÂÄº
   29          int32_t g_DutyLeft = 0, g_DutyRight = 0;         // ÊúÄÂêéÁúüÊ≠£Ë¶ÅÁªôÁîµÊú∫ÁöÑPWMÂÄº
   30          
   31          //pidÊéßÂà∂Áõ∏ÂÖ≥ÂèòÈáè
   32          float speed_pid = 0, turn_pid = 0;               //ÈÄüÂ∫¶ÁéØÂíåËΩ¨ÂêëÁéØpidÁöÑÂÄº
   33          int g_speedpoint = 0;
   34          int g_leftpoint = 0, g_rightpoint = 0;           //Â∑¶Âè≥ËΩÆÁöÑÁõÆÊ†áÈÄüÂ∫¶
   35          volatile int16_t positionReal = 0; 
   36          
   37          // ËúÇÈ∏£Âô®ÊéßÂà∂Áõ∏ÂÖ≥ÂèòÈáè
   38          uint8_t beep_flag = 0;                           // ËúÇÈ∏£Âô®ÂºÄÂêØÊ†áÂøóÔºå1Ë°®Á§∫ÂºÄÂêØ
   39          uint16_t beep_count = 0;                         // ËúÇÈ∏£Âô®ËÆ°Êó∂ËÆ°Êï∞Âô®
   40          uint8_t track_ten_cnt = 0;                       //Âá∫ÂÖ•ÁéØÈáçÂ§çÂà§ÂÆöËÆ°Êó∂Âô®
   41          uint16_t outisland_cnt = 0;                      //Âá∫ÂÖ•ÁéØÂ≤õÈáçÂ§çÂà§ÂÆöËÆ°Êó∂Âô®
   42          
   43          volatile uint8_t intoisland_pos = 92;            //ÂÖ•ÁéØÂ≤õÁöÑÂÅèÂ∑Æ
   44          volatile uint16_t intoisland_str_dist = 10200;   //ÂÖ•ÁéØÂ≤õÁõ¥Ëµ∞Ë∑ùÁ¶ª
   45          volatile uint16_t intoisland_all_dist = 12800;   //ÂÖ•ÁéØÂ≤õÊÄªË∑ùÁ¶ª
   46          
   47          volatile uint8_t outisland_pos = 60;             //Âá∫ÁéØÂ≤õÁöÑÂÅèÂ∑Æ
   48          volatile uint16_t outisland_turn_dist = 5700;    //Âá∫ÁéØÂ≤õÊãêÂºØË∑ùÁ¶ª
   49          volatile uint16_t outisland_all_dist = 7500;     //Âá∫ÁéØÂ≤õÊÄªË∑ùÁ¶ª
   50          
   51          int count = 0, flag = 0;
   52          
   53          //UART1‰∏≠Êñ≠
   54          void UART1_Isr() interrupt 4
C251 COMPILER V5.60.0,  isr                                                                19/07/25  22:37:10  PAGE 2   

   55          {
   56   1      //  uint8 res;
   57   1      //      static uint8 dwon_count;
   58   1              
   59   1          if(UART1_GET_TX_FLAG)
   60   1          {
   61   2              UART1_CLEAR_TX_FLAG;
   62   2              busy[1] = 0;
   63   2          }
   64   1              
   65   1          if(UART1_GET_RX_FLAG)
   66   1          {
   67   2              UART1_CLEAR_RX_FLAG;
   68   2      //        res = SBUF;
   69   2      //        //Á®ãÂ∫èËá™Âä®‰∏ãËΩΩ
   70   2      //        if(res == 0x7F)
   71   2      //        {
   72   2      //            if(dwon_count++ > 20)
   73   2      //                IAP_CONTR = 0x60;
   74   2      //        }
   75   2      //        else
   76   2      //        {
   77   2      //            dwon_count = 0;
   78   2      //        }
   79   2          }
   80   1      }
   81          
   82          //UART2‰∏≠Êñ≠
   83          void UART2_Isr() interrupt 8
   84          {
   85   1          if(UART2_GET_TX_FLAG)
   86   1              {
   87   2              UART2_CLEAR_TX_FLAG;
   88   2                      busy[2] = 0;
   89   2              }
   90   1          if(UART2_GET_RX_FLAG)
   91   1              {
   92   2              UART2_CLEAR_RX_FLAG;
   93   2                      
   94   2                      //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS2BUF
   95   2      
   96   2              }
   97   1      }
   98          
   99          
  100          //UART3‰∏≠Êñ≠
  101          void UART3_Isr() interrupt 17
  102          {
  103   1          if(UART3_GET_TX_FLAG)
  104   1              {
  105   2              UART3_CLEAR_TX_FLAG;
  106   2                      busy[3] = 0;
  107   2              }
  108   1          if(UART3_GET_RX_FLAG)
  109   1              {
  110   2              UART3_CLEAR_RX_FLAG;
  111   2                      
  112   2                      //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS3BUF
  113   2      
  114   2              }
  115   1      }
  116          
  117          
  118          //UART4‰∏≠Êñ≠
  119          void UART4_Isr() interrupt 18
  120          {
C251 COMPILER V5.60.0,  isr                                                                19/07/25  22:37:10  PAGE 3   

  121   1          if(UART4_GET_TX_FLAG)
  122   1              {
  123   2              UART4_CLEAR_TX_FLAG;
  124   2                      busy[4] = 0;
  125   2              }
  126   1          if(UART4_GET_RX_FLAG)
  127   1              {
  128   2              UART4_CLEAR_RX_FLAG;
  129   2                      
  130   2                      //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS4BUF;
  131   2                      g_rxdat = S4BUF;
  132   2                      g_rxbuffer[g_rxpointer++] = g_rxdat;
  133   2              }
  134   1      }
  135          
  136          void INT0_Isr() interrupt 0
  137          {
  138   1              
  139   1      }
  140          
  141          
  142          void INT1_Isr() interrupt 2
  143          {
  144   1      
  145   1      }
  146          
  147          
  148          // void INT2_Isr() interrupt 10
  149          // {
  150          //      INT2_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  151          // }
  152          
  153          
  154          // void INT3_Isr() interrupt 11
  155          // {
  156          //      INT3_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  157          // }
  158          
  159          // void INT4_Isr() interrupt 16
  160          // {
  161          //      INT4_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  162          // }
  163          
  164          void TM0_Isr() interrupt 1
  165          {
  166   1      
  167   1      }
  168          
  169          
  170          /* 10ms */
  171          void TM1_Isr() interrupt 3
  172          {
  173   1              int i = 0;
  174   1              
  175   1              key[0].state = P72;
  176   1              key[1].state = P71;
  177   1              key[2].state = P70;
  178   1              key[3].state = P73;
  179   1              
  180   1              for (i = 0; i < 4; i++)
  181   1              {
  182   2                      switch (key[i].step)
  183   2                      {
  184   3                              case 0:
  185   3                              {
  186   4                                      if (key[i].state == 0)
C251 COMPILER V5.60.0,  isr                                                                19/07/25  22:37:10  PAGE 4   

  187   4                                      {
  188   5                                              key[i].step = 1;
  189   5                                              key[i].key_time = 0;
  190   5                                      }
  191   4                              }
  192   3                              break;
  193   3                              
  194   3                              case 1:
  195   3                              {
  196   4                                      if (key[i].state == 0)
  197   4                                      {
  198   5                                              key[i].step = 2;
  199   5                                      }
  200   4                                      else
  201   4                                      {
  202   5                                              key[i].step = 0;
  203   5                                      }
  204   4                              }
  205   3                              break;
  206   3                              
  207   3                              case 2:
  208   3                              {
  209   4                                      if (key[i].state == 1)//ÊùæÂºÄ
  210   4                                      {
  211   5                                              key[i].step = 0;
  212   5                                              
  213   5                                              if (key[i].key_time <= 80)//Áü≠Êåâ
  214   5                                              {
  215   6                                                      key[i].short_flag = 1;
  216   6                                              }
  217   5                                      }
  218   4                                      else
  219   4                                      {
  220   5                                              key[i].key_time++;
  221   5                                              
  222   5                                              if (key[i].key_time > 80)//ÈïøÊåâ
  223   5                                              {
  224   6                                                      key[i].long_flag = 1;
  225   6                                              }
  226   5                                      }
  227   4                              }
  228   3                              break;
  229   3                      }
  230   2              }
  231   1              
  232   1              /* ÊôÆÈÄöÂÆöÊó∂ÂäüËÉΩÔºåÂ§áÁî® */
  233   1              count++;
  234   1              if (count >= 50)
  235   1              {
  236   2                      flag = 1;
  237   2                      count = 0;
  238   2              }
  239   1      
  240   1              /* Ê£ÄÊµãËµõÈÅìÁ±ªÂûãÂèòÂåñÂπ∂ÊéßÂà∂ËúÇÈ∏£Âô® */
  241   1          if (track_type != track_type_last)
  242   1          {
  243   2              // ËµõÈÅìÁ±ªÂûãÂèëÁîüÂèòÂåñÔºåÂêØÂä®ËúÇÈ∏£Âô®
  244   2              beep_flag = 1;
  245   2              beep_count = 0;  // ÈáçÁΩÆËÆ°Êï∞Âô®
  246   2                      P26 = 0;         // ÊâìÂºÄËúÇÈ∏£Âô®
  247   2              
  248   2              // Êõ¥Êñ∞‰∏ä‰∏ÄÊ¨°ËµõÈÅìÁ±ªÂûã
  249   2              track_type_last = track_type;
  250   2          }
  251   1          
  252   1          /* ËúÇÈ∏£Âô®ËÆ°Êó∂ÊéßÂà∂ */
C251 COMPILER V5.60.0,  isr                                                                19/07/25  22:37:10  PAGE 5   

  253   1          if (beep_flag)
  254   1          {
  255   2              beep_count++;
  256   2              // 10ms * 20 = 200ms
  257   2              if (beep_count >= 10)
  258   2              {
  259   3                  beep_count = 0;
  260   3                  beep_flag = 0;
  261   3                  P26 = 1;  // ÂÖ≥Èó≠ËúÇÈ∏£Âô®
  262   3              }
  263   2          }
  264   1      
  265   1              /* Âá∫ÁéØËæÖÂä©Âà§ÂÆöÔºåÂ§áÁî® */
  266   1          // if (track_route_status == 3)
  267   1          // {
  268   1              //      P26 = 0;
  269   1          //     beep_count++;
  270   1          //     // 10ms * 20 = 200ms
  271   1          //     if (beep_count >= 10)
  272   1          //     {
  273   1          //         beep_count = 0;
  274   1          //         P26 = 1;  // ÂÖ≥Èó≠ËúÇÈ∏£Âô®
  275   1              //              track_route_status = 2;
  276   1          //     }
  277   1          // }
  278   1      
  279   1              /* Âá∫ÂÖ•ÂçÅÂ≠óÂúÜÁéØËÆ°Êó∂Âà§ÂÆö */
  280   1              // if (ten_ch_flag == 1)
  281   1              // {
  282   1              //      track_ten_cnt++;
  283   1              //      if (track_ten_cnt >= 150)
  284   1              //      {
  285   1              //              track_ten_flag = 1;
  286   1              //              track_ten_cnt = 0;
  287   1              //              ten_ch_flag = 0;
  288   1              //      }
  289   1              // }
  290   1      
  291   1              /* Âá∫ÂÖ•ÁéØÂ≤õËÆ°Êó∂Âà§ÂÆö */
  292   1              if (island_ch_flag == 1)
  293   1              {
  294   2                      outisland_cnt++;
  295   2                      if (outisland_cnt >= 500)
  296   2                      {
  297   3                              track_island_flag = 1;
  298   3                              outisland_cnt = 0;
  299   3                              island_ch_flag = 0;
  300   3                      }
  301   2              }
  302   1      
  303   1      }
  304          
  305          
  306          void TM2_Isr() interrupt 12
  307          {
  308   1              TIM2_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  309   1              
  310   1              /* ÂàùÊ≠•ËØªÂèñÂπ∂Ê∏ÖÈô§ÁºñÁ†ÅÂô®ÁöÑÂÄº */
  311   1              EncoderL.encoder_original = get_left_encoder();
  312   1              EncoderR.encoder_original = get_right_encoder();
  313   1      
  314   1              /* ÂØπÁºñÁ†ÅÂô®ÁöÑÂÄºËøõË°åÊª§Ê≥¢ */
  315   1              EncoderL.encoder_final = lowpass_filter(&leftSpeedFilt, EncoderL.encoder_original);
  316   1              EncoderR.encoder_final = lowpass_filter(&rightSpeedFilt, EncoderR.encoder_original);
  317   1      
  318   1              /* ÂØπÁºñÁ†ÅÂô®ÁöÑÂÄºËøõË°åÂºÇÂ∏∏Ê∂àÈô§ */
C251 COMPILER V5.60.0,  isr                                                                19/07/25  22:37:10  PAGE 6   

  319   1              EncoderL.encoder_final = encoder_debounce(&EncoderDeboL, EncoderL.encoder_final);
  320   1              EncoderR.encoder_final = encoder_debounce(&EncoderDeboR, EncoderR.encoder_final);
  321   1      
  322   1              /* ÂèñÂ∑¶Âè≥ÁºñÁ†ÅÂô®Âπ≥ÂùáÂÄº */
  323   1              g_encoder_average = (EncoderL.encoder_final + EncoderR.encoder_final) / 2;
  324   1      
  325   1              /* ËØªÂèñÈôÄËû∫‰ª™ÂéüÂßãÊï∞ÊçÆÂπ∂Â∞ÜÂÖ∂ËΩ¨Âåñ‰∏∫Áâ©ÁêÜÊï∞ÊçÆ */
  326   1              imu963ra_get_gyro();
  327   1              Gyro_Z = imu963ra_gyro_transition(imu963ra_gyro_z);
  328   1              
  329   1              SpeedPID.kp = speed_kp;
  330   1              SpeedPID.ki = speed_ki;
  331   1              TurnPID.kp = turn_kp;
  332   1              TurnPID.kd = turn_kd;
  333   1              
  334   1              if (track_type == 0)//ÊôÆÈÄöÁõ¥Á∫ø
  335   1              {
  336   2                      g_speedpoint = (int)SPEED_STRAIGHT;
  337   2                      positionReal = position;
  338   2              }
  339   1              else if (track_type == 1)//Áõ¥Ëßí
  340   1              {
  341   2                      g_speedpoint = (int)SPEED_STRAIGHT;
  342   2                      
  343   2                      positionReal = position;
  344   2                      
  345   2                      TurnPID.kp = angle_kp;
  346   2                      TurnPID.kd = angle_kd;
  347   2                      
  348   2                      //                      if (track_type_zj == 1)//Â∑¶   ÂÜôÊ≠ªÊïàÊûú‰∏çÂ•Ω
  349   2      //                      {
  350   2      //                              positionReal = 80;
  351   2      //                      }
  352   2      //                      else if (track_type_zj == 2)//Âè≥
  353   2      //                      {
  354   2      //                              positionReal = -80;
  355   2      //                      }
  356   2              }
  357   1              else if (track_type == 3 && track_route_status == 1)//ÂúÜÁéØÂÖ•ÁéØ
  358   1              {
  359   2                      g_speedpoint = (int)SPEED_ISLAND;
  360   2                      g_intencoderALL += g_encoder_average;
  361   2                      
  362   2                      if(g_intencoderALL <= intoisland_str_dist)//Á¨¨‰∏ÄÈò∂ÊÆµÂÖàÁõ¥Ë°å
  363   2                      {
  364   3                              positionReal = 0;
  365   3                      }
  366   2                      else//ËøõÂÖ•Á¨¨‰∫åÈò∂ÊÆµÊâìÊ≠ªËøõÁéØ
  367   2                      {
  368   3                              if (track_route == 1)//Â∑¶ÁéØ
  369   3                              {
  370   4                                      positionReal = intoisland_pos;
  371   4                              }
  372   3                              else if (track_route == 2)//Âè≥ÁéØ
  373   3                              {
  374   4                                      positionReal = -intoisland_pos;
  375   4                              }
  376   3                                                      
  377   3                              if (g_intencoderALL >= intoisland_all_dist)//ÂÖ•ÁéØÂÆåÊØï
  378   3                              {
  379   4                                      track_route_status = 2;
  380   4                                      g_intencoderALL = 0;
  381   4                              }
  382   3                      }
  383   2              }
  384   1              else if (track_type == 3 && track_route_status == 2)//ÁéØÂ≤õÂÜÖÈÉ®
C251 COMPILER V5.60.0,  isr                                                                19/07/25  22:37:10  PAGE 7   

  385   1              {
  386   2                      g_speedpoint = (int)SPEED_ISLAND;
  387   2                      positionReal = position;
  388   2              }
  389   1              else if (track_type == 3 && track_route_status == 3)//ÂúÜÁéØÂá∫ÁéØ
  390   1              {
  391   2                      g_speedpoint = (int)SPEED_ISLAND;
  392   2                      g_intencoderALL += g_encoder_average;
  393   2                      
  394   2                      if (g_intencoderALL <= outisland_turn_dist)//Á¨¨‰∏ÄÈò∂ÊÆµÊâìÊ≠ªÂá∫ÁéØ
  395   2                      {
  396   3                              if (track_route == 1)//Â∑¶ÁéØ
  397   3                              {
  398   4                                      positionReal = outisland_pos;
  399   4                              }
  400   3                              else if (track_route == 2)//Âè≥ÁéØ
  401   3                              {
  402   4                                      positionReal = -outisland_pos;
  403   4                              }
  404   3                      }
  405   2                      else//Á¨¨‰∫åÈò∂ÊÆµÁõ¥Ëµ∞
  406   2                      {
  407   3                              positionReal = 0;
  408   3                              
  409   3                              if (g_intencoderALL >= outisland_all_dist)//Âá∫ÁéØÂÆåÊØï
  410   3                              {
  411   4                                      track_type = 0;
  412   4                                      track_route = 0;
  413   4                                      track_route_status = 0;
  414   4                                      
  415   4                                      g_intencoderALL = 0;
  416   4                              }
  417   3                      }
  418   2              }
  419   1              
  420   1              if (startKeyFlag == 1)
  421   1              {
  422   2                      /* ÂØπGyro_ZËøõË°åÂç°Â∞îÊõºÊª§Ê≥¢ */
  423   2                      filtered_GyroZ = kalman_update(&imu693_kf, Gyro_Z);
  424   2                      
  425   2                      /* ËΩ¨ÂêëÁéØPIDÊéßÂà∂ */
  426   2                      turn_pid = pid_poisitional_turnning(&TurnPID, positionReal, filtered_GyroZ);
  427   2      
  428   2                      /* Êõ¥Êñ∞Âç°Â∞îÊõºÊª§Ê≥¢Âô®ÁöÑÂÄº */
  429   2                      kalman_predict(&imu693_kf, turn_pid);
  430   2      
  431   2                      /* ÈÄüÂ∫¶ÁéØPIDÊéßÂà∂ */
  432   2                      speed_pid = pid_increment(&SpeedPID, g_encoder_average, g_speedpoint);
  433   2      
  434   2                      /* ÊéßÂà∂ÁîµÊú∫ */
  435   2                      g_DutyLeft = (int32_t)(speed_pid - turn_pid);
  436   2                      g_DutyRight = (int32_t)(speed_pid + turn_pid);
  437   2      
  438   2                      if (protection_flag == 1)
  439   2                      {
  440   3                              pid_clean(&SpeedPID);  // Ê∏ÖÈô§ÈÄüÂ∫¶ÁéØPID
  441   3                              pid_clean(&TurnPID);   // Ê∏ÖÈô§ËΩ¨ÂêëÁéØPID
  442   3      
  443   3                              set_motor_pwm(0, 0);
  444   3                      }
  445   2                      else
  446   2                      {
  447   3                              set_motor_pwm(g_DutyLeft, g_DutyRight);
  448   3                      }
  449   2              }
  450   1      }
C251 COMPILER V5.60.0,  isr                                                                19/07/25  22:37:10  PAGE 8   

  451          
  452          
  453          void TM3_Isr() interrupt 19
  454          {
  455   1              TIM3_CLEAR_FLAG; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  456   1              
  457   1      }
  458          
  459          void TM4_Isr() interrupt 20
  460          {
  461   1              TIM4_CLEAR_FLAG; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  462   1      
  463   1      }
  464          
  465          //void  INT0_Isr()  interrupt 0;
  466          //void  TM0_Isr()   interrupt 1;
  467          //void  INT1_Isr()  interrupt 2;
  468          //void  TM1_Isr()   interrupt 3;
  469          //void  UART1_Isr() interrupt 4;
  470          //void  ADC_Isr()   interrupt 5;
  471          //void  LVD_Isr()   interrupt 6;
  472          //void  PCA_Isr()   interrupt 7;
  473          //void  UART2_Isr() interrupt 8;
  474          //void  SPI_Isr()   interrupt 9;
  475          //void  INT2_Isr()  interrupt 10;
  476          //void  INT3_Isr()  interrupt 11;
  477          //void  TM2_Isr()   interrupt 12;
  478          //void  INT4_Isr()  interrupt 16;
  479          //void  UART3_Isr() interrupt 17;
  480          //void  UART4_Isr() interrupt 18;
  481          //void  TM3_Isr()   interrupt 19;
  482          //void  TM4_Isr()   interrupt 20;
  483          //void  CMP_Isr()   interrupt 21;
  484          //void  I2C_Isr()   interrupt 24;
  485          //void  USB_Isr()   interrupt 25;
  486          //void  PWM1_Isr()  interrupt 26;
  487          //void  PWM2_Isr()  interrupt 27;


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2100     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        58     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       181     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
