C251 COMPILER V5.60.0,  isr                                                                15/07/25  22:35:39  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE isr
OBJECT MODULE PLACED IN .\Out_File\isr.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\isr.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZE
                    -(0,SPEED) BROWSE INCDIR(..\USER\inc;..\USER\src;..\libraries;..\seekfree_libraries;..\seekfree_peripheral) DEBUG PRINT(.
                    -\Out_File\isr.lst) OBJECT(.\Out_File\isr.obj) 

stmt  level    source

    1          ///******************************************************************************************************
             -***************
    2          // * COPYRIGHT NOTICE
    3          // * Copyright (c) 2020,ÈÄêÈ£ûÁßëÊäÄ
    4          // * All rights reserved.
    5          // * ÊäÄÊúØËÆ®ËÆ∫QQÁæ§Ôºö‰∏ÄÁæ§Ôºö179029047(Â∑≤Êª°)  ‰∫åÁæ§Ôºö244861897(Â∑≤Êª°)  ‰∏âÁæ§Ôºö824575535
    6          // *
    7          // * ‰ª•‰∏ãÊâÄÊúâÂÜÖÂÆπÁâàÊùÉÂùáÂ±ûÈÄêÈ£ûÁßëÊäÄÊâÄÊúâÔºåÊú™ÁªèÂÖÅËÆ∏‰∏çÂæóÁî®‰∫éÂïÜ‰∏öÁî®ÈÄîÔºå
    8          // * Ê¨¢ËøéÂêÑ‰Ωç‰ΩøÁî®Âπ∂‰º†Êí≠Êú¨Á®ãÂ∫èÔºå‰øÆÊîπÂÜÖÂÆπÊó∂ÂøÖÈ°ª‰øùÁïôÈÄêÈ£ûÁßëÊäÄÁöÑÁâàÊùÉÂ£∞Êòé„ÄÇ
    9          // *
   10          // * @file                      isr
   11          // * @company                   ÊàêÈÉΩÈÄêÈ£ûÁßëÊäÄÊúâÈôêÂÖ¨Âè∏
   12          // * @author                    ÈÄêÈ£ûÁßëÊäÄ(QQ790875685)
   13          // * @version                   Êü•ÁúãdocÂÜÖversionÊñá‰ª∂ ÁâàÊú¨ËØ¥Êòé
   14          // * @Software                  MDK FOR C251 V5.60
   15          // * @Target core               STC32G12K128
   16          // * @Taobao                    https://seekfree.taobao.com/
   17          // * @date                      2020-4-14
   18          // ******************************************************************************************************
             -**************/
   19          #include "headfile.h"
   20          #include "zf_nvic.h"
   21          // #include "zf_exti.h"
   22          #include "zf_uart.h"
   23          #include "zf_tim.h"
   24          
   25          int g_encoder_average = 0;                       //Â∑¶Âè≥ÁºñÁ†ÅÂô®ÁöÑÂπ≥ÂùáÂÄº
   26          float Gyro_Z = 0, filtered_GyroZ = 0;            // ÈôÄËû∫‰ª™ËßíÈÄüÂ∫¶ÁöÑÂéüÂßãÂÄºÂíåÂç°Â∞îÊõºÊª§Ê≥¢‰πãÂê
             -éÁöÑÂÄº
   27          int32_t g_DutyLeft = 0, g_DutyRight = 0;         // ÊúÄÂêéÁúüÊ≠£Ë¶ÅÁªôÁîµÊú∫ÁöÑPWMÂÄº
   28          
   29          //pidÊéßÂà∂Áõ∏ÂÖ≥ÂèòÈáè
   30          float speed_pid = 0, turn_pid = 0;               //ÈÄüÂ∫¶ÁéØÂíåËΩ¨ÂêëÁéØpidÁöÑÂÄº
   31          int g_speedpoint = 70;
   32          int g_leftpoint = 0, g_rightpoint = 0;           //Â∑¶Âè≥ËΩÆÁöÑÁõÆÊ†áÈÄüÂ∫¶
   33          int16_t positionReal = 0; 
   34          
   35          // ËúÇÈ∏£Âô®ÊéßÂà∂Áõ∏ÂÖ≥ÂèòÈáè
   36          uint8_t beep_flag = 0;                           // ËúÇÈ∏£Âô®ÂºÄÂêØÊ†áÂøóÔºå1Ë°®Á§∫ÂºÄÂêØ
   37          uint16_t beep_count = 0;                         // ËúÇÈ∏£Âô®ËÆ°Êó∂ËÆ°Êï∞Âô®
   38          uint8_t track_ten_cnt = 0;                       //Âá∫ÂÖ•ÁéØÈáçÂ§çÂà§ÂÆöËÆ°Êó∂Âô®
   39          uint16_t outisland_cnt = 0;                      //Âá∫ÂÖ•ÁéØÂ≤õÈáçÂ§çÂà§ÂÆöËÆ°Êó∂Âô®
   40          
   41          volatile uint8_t intoisland_pos = 65;            //ÂÖ•ÁéØÂ≤õÁöÑÂÅèÂ∑Æ
   42          volatile uint16_t intoisland_str_dist = 10500;   //ÂÖ•ÁéØÂ≤õÁõ¥Ëµ∞Ë∑ùÁ¶ª
   43          volatile uint16_t intoisland_all_dist = 11500;   //ÂÖ•ÁéØÂ≤õÊÄªË∑ùÁ¶ª
   44          
   45          volatile uint8_t outisland_pos = 30;             //Âá∫ÁéØÂ≤õÁöÑÂÅèÂ∑Æ
   46          volatile uint16_t outisland_turn_dist = 5500;    //Âá∫ÁéØÂ≤õÊãêÂºØË∑ùÁ¶ª
   47          volatile uint16_t outisland_all_dist = 7400;     //Âá∫ÁéØÂ≤õÊÄªË∑ùÁ¶ª
   48          
   49          int count = 0, flag = 0;
   50          
   51          //UART1‰∏≠Êñ≠
   52          void UART1_Isr() interrupt 4
   53          {
   54   1      //  uint8 res;
C251 COMPILER V5.60.0,  isr                                                                15/07/25  22:35:39  PAGE 2   

   55   1      //      static uint8 dwon_count;
   56   1              
   57   1          if(UART1_GET_TX_FLAG)
   58   1          {
   59   2              UART1_CLEAR_TX_FLAG;
   60   2              busy[1] = 0;
   61   2          }
   62   1              
   63   1          if(UART1_GET_RX_FLAG)
   64   1          {
   65   2              UART1_CLEAR_RX_FLAG;
   66   2      //        res = SBUF;
   67   2      //        //Á®ãÂ∫èËá™Âä®‰∏ãËΩΩ
   68   2      //        if(res == 0x7F)
   69   2      //        {
   70   2      //            if(dwon_count++ > 20)
   71   2      //                IAP_CONTR = 0x60;
   72   2      //        }
   73   2      //        else
   74   2      //        {
   75   2      //            dwon_count = 0;
   76   2      //        }
   77   2          }
   78   1      }
   79          
   80          //UART2‰∏≠Êñ≠
   81          void UART2_Isr() interrupt 8
   82          {
   83   1          if(UART2_GET_TX_FLAG)
   84   1              {
   85   2              UART2_CLEAR_TX_FLAG;
   86   2                      busy[2] = 0;
   87   2              }
   88   1          if(UART2_GET_RX_FLAG)
   89   1              {
   90   2              UART2_CLEAR_RX_FLAG;
   91   2                      
   92   2                      //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS2BUF
   93   2      
   94   2              }
   95   1      }
   96          
   97          
   98          //UART3‰∏≠Êñ≠
   99          void UART3_Isr() interrupt 17
  100          {
  101   1          if(UART3_GET_TX_FLAG)
  102   1              {
  103   2              UART3_CLEAR_TX_FLAG;
  104   2                      busy[3] = 0;
  105   2              }
  106   1          if(UART3_GET_RX_FLAG)
  107   1              {
  108   2              UART3_CLEAR_RX_FLAG;
  109   2                      
  110   2                      //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS3BUF
  111   2      
  112   2              }
  113   1      }
  114          
  115          
  116          //UART4‰∏≠Êñ≠
  117          void UART4_Isr() interrupt 18
  118          {
  119   1          if(UART4_GET_TX_FLAG)
  120   1              {
C251 COMPILER V5.60.0,  isr                                                                15/07/25  22:35:39  PAGE 3   

  121   2              UART4_CLEAR_TX_FLAG;
  122   2                      busy[4] = 0;
  123   2              }
  124   1          if(UART4_GET_RX_FLAG)
  125   1              {
  126   2              UART4_CLEAR_RX_FLAG;
  127   2                      
  128   2                      //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS4BUF;
  129   2                      g_rxdat = S4BUF;
  130   2                      g_rxbuffer[g_rxpointer++] = g_rxdat;
  131   2              }
  132   1      }
  133          
  134          void INT0_Isr() interrupt 0
  135          {
  136   1              
  137   1      }
  138          
  139          
  140          void INT1_Isr() interrupt 2
  141          {
  142   1      
  143   1      }
  144          
  145          
  146          // void INT2_Isr() interrupt 10
  147          // {
  148          //      INT2_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  149          // }
  150          
  151          
  152          // void INT3_Isr() interrupt 11
  153          // {
  154          //      INT3_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  155          // }
  156          
  157          // void INT4_Isr() interrupt 16
  158          // {
  159          //      INT4_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  160          // }
  161          
  162          void TM0_Isr() interrupt 1
  163          {
  164   1      
  165   1      }
  166          
  167          
  168          /* 10ms */
  169          void TM1_Isr() interrupt 3
  170          {
  171   1              int i = 0;
  172   1              
  173   1              key[0].state = P72;
  174   1              key[1].state = P71;
  175   1              key[2].state = P70;
  176   1              key[3].state = P73;
  177   1              
  178   1              for (i = 0; i < 4; i++)
  179   1              {
  180   2                      switch (key[i].step)
  181   2                      {
  182   3                              case 0:
  183   3                              {
  184   4                                      if (key[i].state == 0)
  185   4                                      {
  186   5                                              key[i].step = 1;
C251 COMPILER V5.60.0,  isr                                                                15/07/25  22:35:39  PAGE 4   

  187   5                                      }
  188   4                              }
  189   3                              break;
  190   3                              
  191   3                              case 1:
  192   3                              {
  193   4                                      if (key[i].state == 0)
  194   4                                      {
  195   5                                              key[i].step = 2;
  196   5                                              key[i].flag = 1;
  197   5                                      }
  198   4                                      else
  199   4                                      {
  200   5                                              key[i].step = 0;
  201   5                                      }
  202   4                              }
  203   3                              break;
  204   3                              
  205   3                              case 2:
  206   3                              {
  207   4                                      if (key[i].state == 1)
  208   4                                      {
  209   5                                              key[i].step = 0;
  210   5                                      }
  211   4                              }
  212   3                              break;
  213   3                      }
  214   2              }
  215   1              
  216   1              /* ÊôÆÈÄöÂÆöÊó∂ÂäüËÉΩÔºåÂ§áÁî® */
  217   1              count++;
  218   1              if (count >= 50)
  219   1              {
  220   2                      flag = 1;
  221   2                      count = 0;
  222   2              }
  223   1      
  224   1              /* Ê£ÄÊµãËµõÈÅìÁ±ªÂûãÂèòÂåñÂπ∂ÊéßÂà∂ËúÇÈ∏£Âô® */
  225   1          if (track_type != track_type_last)
  226   1          {
  227   2              // ËµõÈÅìÁ±ªÂûãÂèëÁîüÂèòÂåñÔºåÂêØÂä®ËúÇÈ∏£Âô®
  228   2              beep_flag = 1;
  229   2              beep_count = 0;  // ÈáçÁΩÆËÆ°Êï∞Âô®
  230   2                      P26 = 0;         // ÊâìÂºÄËúÇÈ∏£Âô®
  231   2              
  232   2              // Êõ¥Êñ∞‰∏ä‰∏ÄÊ¨°ËµõÈÅìÁ±ªÂûã
  233   2              track_type_last = track_type;
  234   2          }
  235   1          
  236   1          /* ËúÇÈ∏£Âô®ËÆ°Êó∂ÊéßÂà∂ */
  237   1          if (beep_flag)
  238   1          {
  239   2              beep_count++;
  240   2              // 10ms * 20 = 200ms
  241   2              if (beep_count >= 10)
  242   2              {
  243   3                  beep_count = 0;
  244   3                  beep_flag = 0;
  245   3                  P26 = 1;  // ÂÖ≥Èó≠ËúÇÈ∏£Âô®
  246   3              }
  247   2          }
  248   1      
  249   1              /* Âá∫ÁéØËæÖÂä©Âà§ÂÆöÔºåÂ§áÁî® */
  250   1          // if (track_route_status == 3)
  251   1          // {
  252   1              //      P26 = 0;
C251 COMPILER V5.60.0,  isr                                                                15/07/25  22:35:39  PAGE 5   

  253   1          //     beep_count++;
  254   1          //     // 10ms * 20 = 200ms
  255   1          //     if (beep_count >= 10)
  256   1          //     {
  257   1          //         beep_count = 0;
  258   1          //         P26 = 1;  // ÂÖ≥Èó≠ËúÇÈ∏£Âô®
  259   1              //              track_route_status = 2;
  260   1          //     }
  261   1          // }
  262   1      
  263   1              /* Âá∫ÂÖ•ÂçÅÂ≠óÂúÜÁéØËÆ°Êó∂Âà§ÂÆö */
  264   1              // if (ten_ch_flag == 1)
  265   1              // {
  266   1              //      track_ten_cnt++;
  267   1              //      if (track_ten_cnt >= 150)
  268   1              //      {
  269   1              //              track_ten_flag = 1;
  270   1              //              track_ten_cnt = 0;
  271   1              //              ten_ch_flag = 0;
  272   1              //      }
  273   1              // }
  274   1      
  275   1              /* Âá∫ÂÖ•ÁéØÂ≤õËÆ°Êó∂Âà§ÂÆö */
  276   1              if (island_ch_flag == 1)
  277   1              {
  278   2                      outisland_cnt++;
  279   2                      if (outisland_cnt >= 500)
  280   2                      {
  281   3                              track_island_flag = 1;
  282   3                              outisland_cnt = 0;
  283   3                              island_ch_flag = 0;
  284   3                      }
  285   2              }
  286   1      
  287   1      }
  288          
  289          
  290          void TM2_Isr() interrupt 12
  291          {
  292   1              TIM2_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  293   1              
  294   1              if (startKeyFlag == 1)
  295   1              {
  296   2                      /* ÂàùÊ≠•ËØªÂèñÂπ∂Ê∏ÖÈô§ÁºñÁ†ÅÂô®ÁöÑÂÄº */
  297   2                      EncoderL.encoder_original = get_left_encoder();
  298   2                      EncoderR.encoder_original = get_right_encoder();
  299   2      
  300   2                      /* ÂØπÁºñÁ†ÅÂô®ÁöÑÂÄºËøõË°åÊª§Ê≥¢ */
  301   2                      EncoderL.encoder_final = lowpass_filter(&leftSpeedFilt, EncoderL.encoder_original);
  302   2                      EncoderR.encoder_final = lowpass_filter(&rightSpeedFilt, EncoderR.encoder_original);
  303   2      
  304   2                      /* ÂØπÁºñÁ†ÅÂô®ÁöÑÂÄºËøõË°åÂºÇÂ∏∏Ê∂àÈô§ */
  305   2                      EncoderL.encoder_final = encoder_debounce(&EncoderDeboL, EncoderL.encoder_final);
  306   2                      EncoderR.encoder_final = encoder_debounce(&EncoderDeboR, EncoderR.encoder_final);
  307   2      
  308   2                      /* ÂèñÂ∑¶Âè≥ÁºñÁ†ÅÂô®Âπ≥ÂùáÂÄº */
  309   2                      g_encoder_average = (EncoderL.encoder_final + EncoderR.encoder_final) / 2;
  310   2      
  311   2                      /* ËØªÂèñÈôÄËû∫‰ª™ÂéüÂßãÊï∞ÊçÆÂπ∂Â∞ÜÂÖ∂ËΩ¨Âåñ‰∏∫Áâ©ÁêÜÊï∞ÊçÆ */
  312   2                      imu963ra_get_gyro();
  313   2                      Gyro_Z = imu963ra_gyro_transition(imu963ra_gyro_z);
  314   2      
  315   2                      /* ÂØπGyro_ZËøõË°åÂç°Â∞îÊõºÊª§Ê≥¢ */
  316   2                      filtered_GyroZ = kalman_update(&imu693_kf, Gyro_Z);
  317   2                      
  318   2                      if (track_type == 0)//ÊôÆÈÄöÁõ¥Á∫ø
C251 COMPILER V5.60.0,  isr                                                                15/07/25  22:35:39  PAGE 6   

  319   2                      {               
  320   3                              positionReal = position;
  321   3                      }
  322   2                      else if (track_type == 1)//Áõ¥Ëßí
  323   2                      {               
  324   3                              positionReal = position;
  325   3                      }
  326   2                      else if (track_type == 3 && track_route_status == 1)//ÂúÜÁéØÂÖ•ÁéØ
  327   2                      {
  328   3                              g_intencoderALL += g_encoder_average;
  329   3                              
  330   3                              if(g_intencoderALL <= intoisland_str_dist)//Á¨¨‰∏ÄÈò∂ÊÆµÂÖàÁõ¥Ë°å
  331   3                              {
  332   4                                      positionReal = 0;
  333   4                              }
  334   3                              else//ËøõÂÖ•Á¨¨‰∫åÈò∂ÊÆµÊâìÊ≠ªËøõÁéØ
  335   3                              {
  336   4                                      if (track_route == 1)//Â∑¶ÁéØ
  337   4                                      {
  338   5                                              positionReal = intoisland_pos;
  339   5                                      }
  340   4                                      else if (track_route == 2)//Âè≥ÁéØ
  341   4                                      {
  342   5                                              positionReal = -intoisland_pos;
  343   5                                      }
  344   4                                                              
  345   4                                      if (g_intencoderALL >= intoisland_all_dist)//ÂÖ•ÁéØÂÆåÊØï
  346   4                                      {
  347   5                                              track_route_status = 2;
  348   5                                              g_intencoderALL = 0;
  349   5                                      }
  350   4                              }
  351   3                      }
  352   2                      else if (track_type == 3 && track_route_status == 2)//ÁéØÂ≤õÂÜÖÈÉ®
  353   2                      {
  354   3                              positionReal = position;
  355   3      
  356   3      //                      g_intencoderALL += g_encoder_average;
  357   3      
  358   3      //                      if (g_intencoderALL >= 28000)
  359   3      //                      {
  360   3      //                              g_intencoderALL = 0;
  361   3      //                      }
  362   3                      }
  363   2                      else if (track_type == 3 && track_route_status == 3)//ÂúÜÁéØÂá∫ÁéØ
  364   2                      {
  365   3                              g_intencoderALL += g_encoder_average;
  366   3                              
  367   3                              if (g_intencoderALL <= outisland_turn_dist)//Á¨¨‰∏ÄÈò∂ÊÆµÊâìÊ≠ªÂá∫ÁéØ
  368   3                              {
  369   4                                      if (track_route == 1)//Â∑¶ÁéØ
  370   4                                      {
  371   5                                              positionReal = outisland_pos;
  372   5                                      }
  373   4                                      else if (track_route == 2)//Âè≥ÁéØ
  374   4                                      {
  375   5                                              positionReal = -outisland_pos;
  376   5                                      }
  377   4                              }
  378   3                              else//Á¨¨‰∫åÈò∂ÊÆµÁõ¥Ëµ∞
  379   3                              {
  380   4                                      positionReal = 0;
  381   4                                      
  382   4                                      if (g_intencoderALL >= outisland_all_dist)//Âá∫ÁéØÂÆåÊØï
  383   4                                      {
  384   5                                              track_type = 0;
C251 COMPILER V5.60.0,  isr                                                                15/07/25  22:35:39  PAGE 7   

  385   5                                              track_route = 0;
  386   5                                              track_route_status = 0;
  387   5                                              
  388   5                                              g_intencoderALL = 0;
  389   5                                      }
  390   4                              }
  391   3                      }
  392   2                      
  393   2                      /* ËΩ¨ÂêëÁéØPIDÊéßÂà∂ */
  394   2                      turn_pid = pid_poisitional_turnning(&TurnPID, positionReal, filtered_GyroZ);
  395   2      
  396   2                      /* Êõ¥Êñ∞Âç°Â∞îÊõºÊª§Ê≥¢Âô®ÁöÑÂÄº */
  397   2                      kalman_predict(&imu693_kf, turn_pid);
  398   2      
  399   2                      /* ÈÄüÂ∫¶ÁéØPIDÊéßÂà∂ */
  400   2                      speed_pid = pid_increment(&SpeedPID, g_encoder_average, g_speedpoint);
  401   2      
  402   2                      /* ÊéßÂà∂ÁîµÊú∫ */
  403   2                      g_DutyLeft = (int32_t)(speed_pid - turn_pid);
  404   2                      g_DutyRight = (int32_t)(speed_pid + turn_pid);
  405   2      
  406   2                      if (protection_flag == 1)
  407   2                      {
  408   3                              pid_clean(&SpeedPID);  // Ê∏ÖÈô§ÈÄüÂ∫¶ÁéØPID
  409   3                              pid_clean(&TurnPID);   // Ê∏ÖÈô§ËΩ¨ÂêëÁéØPID
  410   3      
  411   3                              set_motor_pwm(0, 0);
  412   3                      }
  413   2                      else
  414   2                      {
  415   3                              set_motor_pwm(g_DutyLeft, g_DutyRight);
  416   3                      }
  417   2              }
  418   1      }
  419          
  420          
  421          void TM3_Isr() interrupt 19
  422          {
  423   1              TIM3_CLEAR_FLAG; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  424   1              
  425   1      }
  426          
  427          void TM4_Isr() interrupt 20
  428          {
  429   1              TIM4_CLEAR_FLAG; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  430   1      
  431   1      }
  432          
  433          //void  INT0_Isr()  interrupt 0;
  434          //void  TM0_Isr()   interrupt 1;
  435          //void  INT1_Isr()  interrupt 2;
  436          //void  TM1_Isr()   interrupt 3;
  437          //void  UART1_Isr() interrupt 4;
  438          //void  ADC_Isr()   interrupt 5;
  439          //void  LVD_Isr()   interrupt 6;
  440          //void  PCA_Isr()   interrupt 7;
  441          //void  UART2_Isr() interrupt 8;
  442          //void  SPI_Isr()   interrupt 9;
  443          //void  INT2_Isr()  interrupt 10;
  444          //void  INT3_Isr()  interrupt 11;
  445          //void  TM2_Isr()   interrupt 12;
  446          //void  INT4_Isr()  interrupt 16;
  447          //void  UART3_Isr() interrupt 17;
  448          //void  UART4_Isr() interrupt 18;
  449          //void  TM3_Isr()   interrupt 19;
  450          //void  TM4_Isr()   interrupt 20;
C251 COMPILER V5.60.0,  isr                                                                15/07/25  22:35:39  PAGE 8   

  451          //void  CMP_Isr()   interrupt 21;
  452          //void  I2C_Isr()   interrupt 24;
  453          //void  USB_Isr()   interrupt 25;
  454          //void  PWM1_Isr()  interrupt 26;
  455          //void  PWM2_Isr()  interrupt 27;


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1745     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        56     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       169     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
