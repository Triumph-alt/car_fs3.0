C251 COMPILER V5.60.0,  isr                                                                13/07/25  00:11:53  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE isr
OBJECT MODULE PLACED IN .\Out_File\isr.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\isr.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZE
                    -(0,SPEED) BROWSE INCDIR(..\USER\inc;..\USER\src;..\libraries;..\seekfree_libraries;..\seekfree_peripheral) DEBUG PRINT(.
                    -\Out_File\isr.lst) OBJECT(.\Out_File\isr.obj) 

stmt  level    source

    1          ///******************************************************************************************************
             -***************
    2          // * COPYRIGHT NOTICE
    3          // * Copyright (c) 2020,ÈÄêÈ£ûÁßëÊäÄ
    4          // * All rights reserved.
    5          // * ÊäÄÊúØËÆ®ËÆ∫QQÁæ§Ôºö‰∏ÄÁæ§Ôºö179029047(Â∑≤Êª°)  ‰∫åÁæ§Ôºö244861897(Â∑≤Êª°)  ‰∏âÁæ§Ôºö824575535
    6          // *
    7          // * ‰ª•‰∏ãÊâÄÊúâÂÜÖÂÆπÁâàÊùÉÂùáÂ±ûÈÄêÈ£ûÁßëÊäÄÊâÄÊúâÔºåÊú™ÁªèÂÖÅËÆ∏‰∏çÂæóÁî®‰∫éÂïÜ‰∏öÁî®ÈÄîÔºå
    8          // * Ê¨¢ËøéÂêÑ‰Ωç‰ΩøÁî®Âπ∂‰º†Êí≠Êú¨Á®ãÂ∫èÔºå‰øÆÊîπÂÜÖÂÆπÊó∂ÂøÖÈ°ª‰øùÁïôÈÄêÈ£ûÁßëÊäÄÁöÑÁâàÊùÉÂ£∞Êòé„ÄÇ
    9          // *
   10          // * @file                      isr
   11          // * @company                   ÊàêÈÉΩÈÄêÈ£ûÁßëÊäÄÊúâÈôêÂÖ¨Âè∏
   12          // * @author                    ÈÄêÈ£ûÁßëÊäÄ(QQ790875685)
   13          // * @version                   Êü•ÁúãdocÂÜÖversionÊñá‰ª∂ ÁâàÊú¨ËØ¥Êòé
   14          // * @Software                  MDK FOR C251 V5.60
   15          // * @Target core               STC32G12K128
   16          // * @Taobao                    https://seekfree.taobao.com/
   17          // * @date                      2020-4-14
   18          // ******************************************************************************************************
             -**************/
   19          #include "headfile.h"
   20          #include "zf_nvic.h"
   21          // #include "zf_exti.h"
   22          #include "zf_uart.h"
   23          #include "zf_tim.h"
   24          
   25          int g_encoder_average = 0;                       //Â∑¶Âè≥ÁºñÁ†ÅÂô®ÁöÑÂπ≥ÂùáÂÄº
   26          float Gyro_Z = 0, filtered_GyroZ = 0;            // ÈôÄËû∫‰ª™ËßíÈÄüÂ∫¶ÁöÑÂéüÂßãÂÄºÂíåÂç°Â∞îÊõºÊª§Ê≥¢‰πãÂê
             -éÁöÑÂÄº
   27          int32_t g_DutyLeft = 0, g_DutyRight = 0;         // ÊúÄÂêéÁúüÊ≠£Ë¶ÅÁªôÁîµÊú∫ÁöÑPWMÂÄº
   28          
   29          //pidÊéßÂà∂Áõ∏ÂÖ≥ÂèòÈáè
   30          float speed_pid = 0, turn_pid = 0;               //ÈÄüÂ∫¶ÁéØÂíåËΩ¨ÂêëÁéØpidÁöÑÂÄº
   31          int g_speedpoint = 100;
   32          int g_leftpoint = 0, g_rightpoint = 0;           //Â∑¶Âè≥ËΩÆÁöÑÁõÆÊ†áÈÄüÂ∫¶
   33          
   34          // ËúÇÈ∏£Âô®ÊéßÂà∂Áõ∏ÂÖ≥ÂèòÈáè
   35          uint8_t beep_flag = 0;                           // ËúÇÈ∏£Âô®ÂºÄÂêØÊ†áÂøóÔºå1Ë°®Á§∫ÂºÄÂêØ
   36          uint16_t beep_count = 0;                         // ËúÇÈ∏£Âô®ËÆ°Êó∂ËÆ°Êï∞Âô®
   37          uint8_t track_ten_cnt = 0;                       //Âá∫ÂÖ•ÁéØÈáçÂ§çÂà§ÂÆöËÆ°Êó∂Âô®
   38          
   39          int count = 0, flag = 0;
   40          
   41          //UART1‰∏≠Êñ≠
   42          void UART1_Isr() interrupt 4
   43          {
   44   1      //  uint8 res;
   45   1      //      static uint8 dwon_count;
   46   1              
   47   1          if(UART1_GET_TX_FLAG)
   48   1          {
   49   2              UART1_CLEAR_TX_FLAG;
   50   2              busy[1] = 0;
   51   2          }
   52   1              
   53   1          if(UART1_GET_RX_FLAG)
   54   1          {
C251 COMPILER V5.60.0,  isr                                                                13/07/25  00:11:53  PAGE 2   

   55   2              UART1_CLEAR_RX_FLAG;
   56   2      //        res = SBUF;
   57   2      //        //Á®ãÂ∫èËá™Âä®‰∏ãËΩΩ
   58   2      //        if(res == 0x7F)
   59   2      //        {
   60   2      //            if(dwon_count++ > 20)
   61   2      //                IAP_CONTR = 0x60;
   62   2      //        }
   63   2      //        else
   64   2      //        {
   65   2      //            dwon_count = 0;
   66   2      //        }
   67   2          }
   68   1      }
   69          
   70          //UART2‰∏≠Êñ≠
   71          void UART2_Isr() interrupt 8
   72          {
   73   1          if(UART2_GET_TX_FLAG)
   74   1              {
   75   2              UART2_CLEAR_TX_FLAG;
   76   2                      busy[2] = 0;
   77   2              }
   78   1          if(UART2_GET_RX_FLAG)
   79   1              {
   80   2              UART2_CLEAR_RX_FLAG;
   81   2                      
   82   2                      //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS2BUF
   83   2      
   84   2              }
   85   1      }
   86          
   87          
   88          //UART3‰∏≠Êñ≠
   89          void UART3_Isr() interrupt 17
   90          {
   91   1          if(UART3_GET_TX_FLAG)
   92   1              {
   93   2              UART3_CLEAR_TX_FLAG;
   94   2                      busy[3] = 0;
   95   2              }
   96   1          if(UART3_GET_RX_FLAG)
   97   1              {
   98   2              UART3_CLEAR_RX_FLAG;
   99   2                      
  100   2                      //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS3BUF
  101   2      
  102   2              }
  103   1      }
  104          
  105          
  106          //UART4‰∏≠Êñ≠
  107          void UART4_Isr() interrupt 18
  108          {
  109   1          if(UART4_GET_TX_FLAG)
  110   1              {
  111   2              UART4_CLEAR_TX_FLAG;
  112   2                      busy[4] = 0;
  113   2              }
  114   1          if(UART4_GET_RX_FLAG)
  115   1              {
  116   2              UART4_CLEAR_RX_FLAG;
  117   2                      
  118   2                      //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS4BUF;
  119   2                      g_rxdat = S4BUF;
  120   2                      g_rxbuffer[g_rxpointer++] = g_rxdat;
C251 COMPILER V5.60.0,  isr                                                                13/07/25  00:11:53  PAGE 3   

  121   2              }
  122   1      }
  123          
  124          void INT0_Isr() interrupt 0
  125          {
  126   1              
  127   1      }
  128          
  129          
  130          void INT1_Isr() interrupt 2
  131          {
  132   1      
  133   1      }
  134          
  135          
  136          // void INT2_Isr() interrupt 10
  137          // {
  138          //      INT2_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  139          // }
  140          
  141          
  142          // void INT3_Isr() interrupt 11
  143          // {
  144          //      INT3_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  145          // }
  146          
  147          // void INT4_Isr() interrupt 16
  148          // {
  149          //      INT4_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  150          // }
  151          
  152          void TM0_Isr() interrupt 1
  153          {
  154   1      
  155   1      }
  156          
  157          
  158          void TM1_Isr() interrupt 3
  159          {
  160   1              int i = 0;
  161   1              
  162   1              key[0].state = P72;
  163   1              key[1].state = P71;
  164   1              key[2].state = P70;
  165   1              key[3].state = P73;
  166   1              
  167   1              for (i = 0; i < 4; i++)
  168   1              {
  169   2                      switch (key[i].step)
  170   2                      {
  171   3                              case 0:
  172   3                              {
  173   4                                      if (key[i].state == 0)
  174   4                                      {
  175   5                                              key[i].step = 1;
  176   5                                      }
  177   4                              }
  178   3                              break;
  179   3                              
  180   3                              case 1:
  181   3                              {
  182   4                                      if (key[i].state == 0)
  183   4                                      {
  184   5                                              key[i].step = 2;
  185   5                                              key[i].flag = 1;
  186   5                                      }
C251 COMPILER V5.60.0,  isr                                                                13/07/25  00:11:53  PAGE 4   

  187   4                                      else
  188   4                                      {
  189   5                                              key[i].step = 0;
  190   5                                      }
  191   4                              }
  192   3                              break;
  193   3                              
  194   3                              case 2:
  195   3                              {
  196   4                                      if (key[i].state == 1)
  197   4                                      {
  198   5                                              key[i].step = 0;
  199   5                                      }
  200   4                              }
  201   3                              break;
  202   3                      }
  203   2              }
  204   1              
  205   1              /* ÊôÆÈÄöÂÆöÊó∂ÂäüËÉΩÔºåÂ§áÁî® */
  206   1              count++;
  207   1              if (count >= 50)
  208   1              {
  209   2                      flag = 1;
  210   2                      count = 0;
  211   2              }
  212   1      
  213   1              /* Ê£ÄÊµãËµõÈÅìÁ±ªÂûãÂèòÂåñÂπ∂ÊéßÂà∂ËúÇÈ∏£Âô® */
  214   1          if (track_type != track_type_last)
  215   1          {
  216   2              // ËµõÈÅìÁ±ªÂûãÂèëÁîüÂèòÂåñÔºåÂêØÂä®ËúÇÈ∏£Âô®
  217   2              beep_flag = 1;
  218   2              beep_count = 0;  // ÈáçÁΩÆËÆ°Êï∞Âô®
  219   2              P26 = 0;         // ÊâìÂºÄËúÇÈ∏£Âô®
  220   2              
  221   2              // Êõ¥Êñ∞‰∏ä‰∏ÄÊ¨°ËµõÈÅìÁ±ªÂûã
  222   2              track_type_last = track_type;
  223   2          }
  224   1          
  225   1          /* ËúÇÈ∏£Âô®ËÆ°Êó∂ÊéßÂà∂ */
  226   1          if (beep_flag)
  227   1          {
  228   2              beep_count++;
  229   2              // 10ms * 20 = 200ms
  230   2              if (beep_count >= 10)
  231   2              {
  232   3                  beep_count = 0;
  233   3                  beep_flag = 0;
  234   3                  P26 = 1;  // ÂÖ≥Èó≠ËúÇÈ∏£Âô®
  235   3              }
  236   2          }
  237   1      
  238   1              /* Âá∫ÂÖ•ÂçÅÂ≠óÂúÜÁéØËÆ°Êó∂Âà§ÂÆö */
  239   1              if (ten_change_flag == 1)
  240   1              {
  241   2                      track_ten_cnt++;
  242   2                      if (track_ten_cnt >= 150)
  243   2                      {
  244   3                              track_ten_flag = 1;
  245   3                              track_ten_cnt = 0;
  246   3                              ten_change_flag = 0;
  247   3                      }
  248   2              }
  249   1      }
  250          
  251          
  252          void TM2_Isr() interrupt 12
C251 COMPILER V5.60.0,  isr                                                                13/07/25  00:11:53  PAGE 5   

  253          {
  254   1              TIM2_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  255   1              
  256   1              if (startKeyFlag == 1)
  257   1              {
  258   2                      /* ÂàùÊ≠•ËØªÂèñÂπ∂Ê∏ÖÈô§ÁºñÁ†ÅÂô®ÁöÑÂÄº */
  259   2                      EncoderL.encoder_original = get_left_encoder();
  260   2                      EncoderR.encoder_original = get_right_encoder();
  261   2      
  262   2                      /* ÂØπÁºñÁ†ÅÂô®ÁöÑÂÄºËøõË°åÊª§Ê≥¢ */
  263   2                      EncoderL.encoder_final = lowpass_filter(&leftSpeedFilt, EncoderL.encoder_original);
  264   2                      EncoderR.encoder_final = lowpass_filter(&rightSpeedFilt, EncoderR.encoder_original);
  265   2      
  266   2                      /* ÂØπÁºñÁ†ÅÂô®ÁöÑÂÄºËøõË°åÂºÇÂ∏∏Ê∂àÈô§ */
  267   2                      EncoderL.encoder_final = encoder_debounce(&EncoderDeboL, EncoderL.encoder_final);
  268   2                      EncoderR.encoder_final = encoder_debounce(&EncoderDeboR, EncoderR.encoder_final);
  269   2      
  270   2                      /* ÂèñÂ∑¶Âè≥ÁºñÁ†ÅÂô®Âπ≥ÂùáÂÄº */
  271   2                      g_encoder_average = (EncoderL.encoder_final + EncoderR.encoder_final) / 2;
  272   2      
  273   2                      /* ËØªÂèñÈôÄËû∫‰ª™ÂéüÂßãÊï∞ÊçÆÂπ∂Â∞ÜÂÖ∂ËΩ¨Âåñ‰∏∫Áâ©ÁêÜÊï∞ÊçÆ */
  274   2                      imu963ra_get_gyro();
  275   2                      Gyro_Z = imu963ra_gyro_transition(imu963ra_gyro_z);
  276   2      
  277   2                      /* ÂØπGyro_ZËøõË°åÂç°Â∞îÊõºÊª§Ê≥¢ */
  278   2                      filtered_GyroZ = kalman_update(&imu693_kf, Gyro_Z);
  279   2                      
  280   2                      /* ËΩ¨ÂêëÁéØPIDÊéßÂà∂ */
  281   2                      turn_pid = pid_poisitional_turnning(&TurnPID, position, filtered_GyroZ);
  282   2      
  283   2                      /* Êõ¥Êñ∞Âç°Â∞îÊõºÊª§Ê≥¢Âô®ÁöÑÂÄº */
  284   2                      kalman_predict(&imu693_kf, turn_pid);
  285   2      
  286   2                      /* ÈÄüÂ∫¶ÁéØPIDÊéßÂà∂ */
  287   2                      speed_pid = pid_increment(&SpeedPID, g_encoder_average, g_speedpoint);
  288   2      
  289   2                      /* ÊéßÂà∂ÁîµÊú∫ */
  290   2                      g_DutyLeft = (int32_t)(speed_pid - turn_pid);
  291   2                      g_DutyRight = (int32_t)(speed_pid + turn_pid);
  292   2      
  293   2                      if (protection_flag == 1)
  294   2                      {
  295   3                              pid_clean(&SpeedPID);  // Ê∏ÖÈô§ÈÄüÂ∫¶ÁéØPID
  296   3                              pid_clean(&TurnPID);   // Ê∏ÖÈô§ËΩ¨ÂêëÁéØPID
  297   3      
  298   3                              set_motor_pwm(0, 0);
  299   3                      }
  300   2                      else
  301   2                      {
  302   3                              set_motor_pwm(g_DutyLeft, g_DutyRight);
  303   3                      }
  304   2              }
  305   1      }
  306          
  307          
  308          void TM3_Isr() interrupt 19
  309          {
  310   1              TIM3_CLEAR_FLAG; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  311   1              
  312   1      }
  313          
  314          void TM4_Isr() interrupt 20
  315          {
  316   1              TIM4_CLEAR_FLAG; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  317   1      
  318   1      }
C251 COMPILER V5.60.0,  isr                                                                13/07/25  00:11:53  PAGE 6   

  319          
  320          //void  INT0_Isr()  interrupt 0;
  321          //void  TM0_Isr()   interrupt 1;
  322          //void  INT1_Isr()  interrupt 2;
  323          //void  TM1_Isr()   interrupt 3;
  324          //void  UART1_Isr() interrupt 4;
  325          //void  ADC_Isr()   interrupt 5;
  326          //void  LVD_Isr()   interrupt 6;
  327          //void  PCA_Isr()   interrupt 7;
  328          //void  UART2_Isr() interrupt 8;
  329          //void  SPI_Isr()   interrupt 9;
  330          //void  INT2_Isr()  interrupt 10;
  331          //void  INT3_Isr()  interrupt 11;
  332          //void  TM2_Isr()   interrupt 12;
  333          //void  INT4_Isr()  interrupt 16;
  334          //void  UART3_Isr() interrupt 17;
  335          //void  UART4_Isr() interrupt 18;
  336          //void  TM3_Isr()   interrupt 19;
  337          //void  TM4_Isr()   interrupt 20;
  338          //void  CMP_Isr()   interrupt 21;
  339          //void  I2C_Isr()   interrupt 24;
  340          //void  USB_Isr()   interrupt 25;
  341          //void  PWM1_Isr()  interrupt 26;
  342          //void  PWM2_Isr()  interrupt 27;


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1345     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        42     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       115     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
