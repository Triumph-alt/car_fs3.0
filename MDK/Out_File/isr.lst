C251 COMPILER V5.60.0,  isr                                                                06/07/25  17:11:20  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE isr
OBJECT MODULE PLACED IN .\Out_File\isr.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\isr.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZE
                    -(0,SPEED) BROWSE INCDIR(..\USER\inc;..\USER\src;..\libraries;..\seekfree_libraries;..\seekfree_peripheral) DEBUG PRINT(.
                    -\Out_File\isr.lst) TABS(2) OBJECT(.\Out_File\isr.obj) 

stmt  level    source

    1          ///******************************************************************************************************
             -***************
    2          // * COPYRIGHT NOTICE
    3          // * Copyright (c) 2020,ÈÄêÈ£ûÁßëÊäÄ
    4          // * All rights reserved.
    5          // * ÊäÄÊúØËÆ®ËÆ∫QQÁæ§Ôºö‰∏ÄÁæ§Ôºö179029047(Â∑≤Êª°)  ‰∫åÁæ§Ôºö244861897(Â∑≤Êª°)  ‰∏âÁæ§Ôºö824575535
    6          // *
    7          // * ‰ª•‰∏ãÊâÄÊúâÂÜÖÂÆπÁâàÊùÉÂùáÂ±ûÈÄêÈ£ûÁßëÊäÄÊâÄÊúâÔºåÊú™ÁªèÂÖÅËÆ∏‰∏çÂæóÁî®‰∫éÂïÜ‰∏öÁî®ÈÄîÔºå
    8          // * Ê¨¢ËøéÂêÑ‰Ωç‰ΩøÁî®Âπ∂‰º†Êí≠Êú¨Á®ãÂ∫èÔºå‰øÆÊîπÂÜÖÂÆπÊó∂ÂøÖÈ°ª‰øùÁïôÈÄêÈ£ûÁßëÊäÄÁöÑÁâàÊùÉÂ£∞Êòé„ÄÇ
    9          // *
   10          // * @file          isr
   11          // * @company       ÊàêÈÉΩÈÄêÈ£ûÁßëÊäÄÊúâÈôêÂÖ¨Âè∏
   12          // * @author        ÈÄêÈ£ûÁßëÊäÄ(QQ790875685)
   13          // * @version       Êü•ÁúãdocÂÜÖversionÊñá‰ª∂ ÁâàÊú¨ËØ¥Êòé
   14          // * @Software      MDK FOR C251 V5.60
   15          // * @Target core   STC32G12K128
   16          // * @Taobao        https://seekfree.taobao.com/
   17          // * @date          2020-4-14
   18          // ******************************************************************************************************
             -**************/
   19          #include "headfile.h"
   20          
   21          int g_encoder_average = 0;                       //Â∑¶Âè≥ÁºñÁ†ÅÂô®ÁöÑÂπ≥ÂùáÂÄº
   22          float Gyro_Z = 0, filtered_GyroZ = 0;            // ÈôÄËû∫‰ª™ËßíÈÄüÂ∫¶ÁöÑÂéüÂßãÂÄºÂíåÂç°Â∞îÊõºÊª§Ê≥¢‰πãÂê
             -éÁöÑÂÄº
   23          int32_t g_DutyLeft = 0, g_DutyRight = 0;         // ÊúÄÂêéÁúüÊ≠£Ë¶ÅÁªôÁîµÊú∫ÁöÑPWMÂÄº
   24          
   25          //pidÊéßÂà∂Áõ∏ÂÖ≥ÂèòÈáè
   26          float speed_pid = 0, turn_pid = 0;               //ÈÄüÂ∫¶ÁéØÂíåËΩ¨ÂêëÁéØpidÁöÑÂÄº
   27          int g_speedpoint = 80;
   28          int g_leftpoint = 0, g_rightpoint = 0;           //Â∑¶Âè≥ËΩÆÁöÑÁõÆÊ†áÈÄüÂ∫¶
   29          
   30          // ËúÇÈ∏£Âô®ÊéßÂà∂Áõ∏ÂÖ≥ÂèòÈáè
   31          uint8_t beep_flag = 0;                           // ËúÇÈ∏£Âô®ÂºÄÂêØÊ†áÂøóÔºå1Ë°®Á§∫ÂºÄÂêØ
   32          uint16_t beep_count = 0;                         // ËúÇÈ∏£Âô®ËÆ°Êó∂ËÆ°Êï∞Âô®
   33          uint8_t track_ten_cnt = 0;                       //Âá∫ÂÖ•ÁéØÈáçÂ§çÂà§ÂÆöËÆ°Êó∂Âô®
   34          
   35          //UART1‰∏≠Êñ≠
   36          void UART1_Isr() interrupt 4
   37          {
   38   1      //  uint8 res;
   39   1      //  static uint8 dwon_count;
   40   1        
   41   1          if(UART1_GET_TX_FLAG)
   42   1          {
   43   2              UART1_CLEAR_TX_FLAG;
   44   2              busy[1] = 0;
   45   2          }
   46   1        
   47   1          if(UART1_GET_RX_FLAG)
   48   1          {
   49   2              UART1_CLEAR_RX_FLAG;
   50   2      //        res = SBUF;
   51   2      //        //Á®ãÂ∫èËá™Âä®‰∏ãËΩΩ
   52   2      //        if(res == 0x7F)
   53   2      //        {
   54   2      //            if(dwon_count++ > 20)
C251 COMPILER V5.60.0,  isr                                                                06/07/25  17:11:20  PAGE 2   

   55   2      //                IAP_CONTR = 0x60;
   56   2      //        }
   57   2      //        else
   58   2      //        {
   59   2      //            dwon_count = 0;
   60   2      //        }
   61   2          }
   62   1      }
   63          
   64          //UART2‰∏≠Êñ≠
   65          void UART2_Isr() interrupt 8
   66          {
   67   1          if(UART2_GET_TX_FLAG)
   68   1        {
   69   2              UART2_CLEAR_TX_FLAG;
   70   2          busy[2] = 0;
   71   2        }
   72   1          if(UART2_GET_RX_FLAG)
   73   1        {
   74   2              UART2_CLEAR_RX_FLAG;
   75   2          
   76   2          //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS2BUF
   77   2      
   78   2        }
   79   1      }
   80          
   81          
   82          //UART3‰∏≠Êñ≠
   83          void UART3_Isr() interrupt 17
   84          {
   85   1          if(UART3_GET_TX_FLAG)
   86   1        {
   87   2              UART3_CLEAR_TX_FLAG;
   88   2          busy[3] = 0;
   89   2        }
   90   1          if(UART3_GET_RX_FLAG)
   91   1        {
   92   2              UART3_CLEAR_RX_FLAG;
   93   2          
   94   2          //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS3BUF
   95   2      
   96   2        }
   97   1      }
   98          
   99          
  100          //UART4‰∏≠Êñ≠
  101          void UART4_Isr() interrupt 18
  102          {
  103   1          if(UART4_GET_TX_FLAG)
  104   1        {
  105   2              UART4_CLEAR_TX_FLAG;
  106   2          busy[4] = 0;
  107   2        }
  108   1          if(UART4_GET_RX_FLAG)
  109   1        {
  110   2              UART4_CLEAR_RX_FLAG;
  111   2          
  112   2          //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS4BUF;
  113   2          g_rxdat = S4BUF;
  114   2          g_rxbuffer[g_rxpointer++] = g_rxdat;
  115   2        }
  116   1      }
  117          
  118          void INT0_Isr() interrupt 0
  119          {
  120   1        
C251 COMPILER V5.60.0,  isr                                                                06/07/25  17:11:20  PAGE 3   

  121   1      }
  122          
  123          
  124          void INT1_Isr() interrupt 2
  125          {
  126   1      
  127   1      }
  128          
  129          
  130          void INT2_Isr() interrupt 10
  131          {
  132   1        INT2_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  133   1      }
  134          
  135          
  136          void INT3_Isr() interrupt 11
  137          {
  138   1        INT3_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  139   1      }
  140          
  141          void INT4_Isr() interrupt 16
  142          {
  143   1        INT4_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  144   1      }
  145          
  146          void TM0_Isr() interrupt 1
  147          {
  148   1      
  149   1      }
  150          
  151          
  152          void TM1_Isr() interrupt 3
  153          {
  154   1        int i = 0;
  155   1        
  156   1        key[0].state = P72;
  157   1        key[1].state = P71;
  158   1        key[2].state = P70;
  159   1        key[3].state = P73;
  160   1        
  161   1        for (i = 0; i < 4; i++)
  162   1        {
  163   2          switch (key[i].step)
  164   2          {
  165   3            case 0:
  166   3            {
  167   4              if (key[i].state == 0)
  168   4              {
  169   5                key[i].step = 1;
  170   5              }
  171   4            }
  172   3            break;
  173   3            
  174   3            case 1:
  175   3            {
  176   4              if (key[i].state == 0)
  177   4              {
  178   5                key[i].step = 2;
  179   5                key[i].flag = 1;
  180   5              }
  181   4              else
  182   4              {
  183   5                key[i].step = 0;
  184   5              }
  185   4            }
  186   3            break;
C251 COMPILER V5.60.0,  isr                                                                06/07/25  17:11:20  PAGE 4   

  187   3            
  188   3            case 2:
  189   3            {
  190   4              if (key[i].state == 1)
  191   4              {
  192   5                key[i].step = 0;
  193   5              }
  194   4            }
  195   3            break;
  196   3          }
  197   2        }
  198   1      
  199   1        /* Ê£ÄÊµãËµõÈÅìÁ±ªÂûãÂèòÂåñÂπ∂ÊéßÂà∂ËúÇÈ∏£Âô® */
  200   1          if (track_type != track_type_last)
  201   1          {
  202   2              // ËµõÈÅìÁ±ªÂûãÂèëÁîüÂèòÂåñÔºåÂêØÂä®ËúÇÈ∏£Âô®
  203   2              beep_flag = 1;
  204   2              beep_count = 0;  // ÈáçÁΩÆËÆ°Êï∞Âô®
  205   2              P26 = 0;         // ÊâìÂºÄËúÇÈ∏£Âô®
  206   2              
  207   2              // Êõ¥Êñ∞‰∏ä‰∏ÄÊ¨°ËµõÈÅìÁ±ªÂûã
  208   2              track_type_last = track_type;
  209   2          }
  210   1          
  211   1          /* ËúÇÈ∏£Âô®ËÆ°Êó∂ÊéßÂà∂ */
  212   1          if (beep_flag)
  213   1          {
  214   2              beep_count++;
  215   2              // 10ms * 20 = 200ms
  216   2              if (beep_count >= 10)
  217   2              {
  218   3                  beep_count = 0;
  219   3                  beep_flag = 0;
  220   3                  P26 = 1;  // ÂÖ≥Èó≠ËúÇÈ∏£Âô®
  221   3              }
  222   2          }
  223   1      
  224   1        /* Âá∫ÂÖ•ÂçÅÂ≠óÂúÜÁéØËÆ°Êó∂Âà§ÂÆö */
  225   1        if (ten_change_flag == 1)
  226   1        {
  227   2          track_ten_cnt++;
  228   2          if (track_ten_cnt >= 150)
  229   2          {
  230   3            track_ten_flag = 1;
  231   3            track_ten_cnt = 0;
  232   3            ten_change_flag = 0;
  233   3          }
  234   2        }
  235   1      }
  236          
  237          
  238          void TM2_Isr() interrupt 12
  239          {
  240   1        TIM2_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  241   1        
  242   1        /* ÂàùÊ≠•ËØªÂèñÂπ∂Ê∏ÖÈô§ÁºñÁ†ÅÂô®ÁöÑÂÄº */
  243   1        EncoderL.encoder_original = get_left_encoder();
  244   1        EncoderR.encoder_original = get_right_encoder();
  245   1      
  246   1        /* ÂØπÁºñÁ†ÅÂô®ÁöÑÂÄºËøõË°åÊª§Ê≥¢ */
  247   1        EncoderL.encoder_final = lowpass_filter(&leftSpeedFilt, EncoderL.encoder_original);
  248   1        EncoderR.encoder_final = lowpass_filter(&rightSpeedFilt, EncoderR.encoder_original);
  249   1      
  250   1        /* ÂØπÁºñÁ†ÅÂô®ÁöÑÂÄºËøõË°åÂºÇÂ∏∏Ê∂àÈô§ */
  251   1        EncoderL.encoder_final = encoder_debounce(&EncoderDeboL, EncoderR.encoder_final);
  252   1        EncoderR.encoder_final = encoder_debounce(&EncoderDeboR, EncoderR.encoder_final);
C251 COMPILER V5.60.0,  isr                                                                06/07/25  17:11:20  PAGE 5   

  253   1      
  254   1        /* ÂèñÂ∑¶Âè≥ÁºñÁ†ÅÂô®Âπ≥ÂùáÂÄº */
  255   1        g_encoder_average = (EncoderL.encoder_final + EncoderR.encoder_final) / 2;
  256   1      
  257   1        /* ËØªÂèñÈôÄËû∫‰ª™ÂéüÂßãÊï∞ÊçÆÂπ∂Â∞ÜÂÖ∂ËΩ¨Âåñ‰∏∫Áâ©ÁêÜÊï∞ÊçÆ */
  258   1        imu963ra_get_gyro();
  259   1        Gyro_Z = imu963ra_gyro_transition(imu963ra_gyro_z);
  260   1      
  261   1        /* ÂØπGyro_ZËøõË°åÂç°Â∞îÊõºÊª§Ê≥¢ */
  262   1        filtered_GyroZ = kalman_update(&imu693_kf, Gyro_Z);
  263   1        
  264   1        /* ËΩ¨ÂêëÁéØPIDÊéßÂà∂ */
  265   1        turn_pid = pid_poisitional_turnning(&TurnPID, position, filtered_GyroZ);
  266   1      
  267   1        /* Êõ¥Êñ∞Âç°Â∞îÊõºÊª§Ê≥¢Âô®ÁöÑÂÄº */
  268   1        kalman_predict(&imu693_kf, turn_pid);
  269   1      
  270   1        /* ÈÄüÂ∫¶ÁéØPIDÊéßÂà∂ */
  271   1        speed_pid = pid_increment(&SpeedPID, g_encoder_average, g_speedpoint);
  272   1      
  273   1        /* ÊéßÂà∂ÁîµÊú∫ */
  274   1        g_DutyLeft = (int32_t)(speed_pid - turn_pid);
  275   1        g_DutyRight = (int32_t)(speed_pid + turn_pid);
  276   1      
  277   1        if (protection_flag == 1)
  278   1        {
  279   2          pid_clean(&SpeedPID);  // Ê∏ÖÈô§ÈÄüÂ∫¶ÁéØPID
  280   2          pid_clean(&TurnPID);   // Ê∏ÖÈô§ËΩ¨ÂêëÁéØPID
  281   2      
  282   2          set_motor_pwm(0, 0);
  283   2        }
  284   1        else
  285   1        {
  286   2          set_motor_pwm(g_DutyLeft, g_DutyRight);
  287   2        }
  288   1      }
  289          
  290          
  291          void TM3_Isr() interrupt 19
  292          {
  293   1        TIM3_CLEAR_FLAG; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  294   1        
  295   1      }
  296          
  297          void TM4_Isr() interrupt 20
  298          {
  299   1        TIM4_CLEAR_FLAG; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  300   1      
  301   1      }
  302          
  303          //void  INT0_Isr()  interrupt 0;
  304          //void  TM0_Isr()   interrupt 1;
  305          //void  INT1_Isr()  interrupt 2;
  306          //void  TM1_Isr()   interrupt 3;
  307          //void  UART1_Isr() interrupt 4;
  308          //void  ADC_Isr()   interrupt 5;
  309          //void  LVD_Isr()   interrupt 6;
  310          //void  PCA_Isr()   interrupt 7;
  311          //void  UART2_Isr() interrupt 8;
  312          //void  SPI_Isr()   interrupt 9;
  313          //void  INT2_Isr()  interrupt 10;
  314          //void  INT3_Isr()  interrupt 11;
  315          //void  TM2_Isr()   interrupt 12;
  316          //void  INT4_Isr()  interrupt 16;
  317          //void  UART3_Isr() interrupt 17;
  318          //void  UART4_Isr() interrupt 18;
C251 COMPILER V5.60.0,  isr                                                                06/07/25  17:11:20  PAGE 6   

  319          //void  TM3_Isr()   interrupt 19;
  320          //void  TM4_Isr()   interrupt 20;
  321          //void  CMP_Isr()   interrupt 21;
  322          //void  I2C_Isr()   interrupt 24;
  323          //void  USB_Isr()   interrupt 25;
  324          //void  PWM1_Isr()  interrupt 26;
  325          //void  PWM2_Isr()  interrupt 27;


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1319     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        38     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       101     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
