C251 COMPILER V5.60.0,  isr                                                                10/07/25  11:57:49  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE isr
OBJECT MODULE PLACED IN .\Out_File\isr.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\isr.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZE
                    -(0,SPEED) BROWSE INCDIR(..\USER\inc;..\USER\src;..\libraries;..\seekfree_libraries;..\seekfree_peripheral) DEBUG PRINT(.
                    -\Out_File\isr.lst) TABS(2) OBJECT(.\Out_File\isr.obj) 

stmt  level    source

    1          ///******************************************************************************************************
             -***************
    2          // * COPYRIGHT NOTICE
    3          // * Copyright (c) 2020,ÈÄêÈ£ûÁßëÊäÄ
    4          // * All rights reserved.
    5          // * ÊäÄÊúØËÆ®ËÆ∫QQÁæ§Ôºö‰∏ÄÁæ§Ôºö179029047(Â∑≤Êª°)  ‰∫åÁæ§Ôºö244861897(Â∑≤Êª°)  ‰∏âÁæ§Ôºö824575535
    6          // *
    7          // * ‰ª•‰∏ãÊâÄÊúâÂÜÖÂÆπÁâàÊùÉÂùáÂ±ûÈÄêÈ£ûÁßëÊäÄÊâÄÊúâÔºåÊú™ÁªèÂÖÅËÆ∏‰∏çÂæóÁî®‰∫éÂïÜ‰∏öÁî®ÈÄîÔºå
    8          // * Ê¨¢ËøéÂêÑ‰Ωç‰ΩøÁî®Âπ∂‰º†Êí≠Êú¨Á®ãÂ∫èÔºå‰øÆÊîπÂÜÖÂÆπÊó∂ÂøÖÈ°ª‰øùÁïôÈÄêÈ£ûÁßëÊäÄÁöÑÁâàÊùÉÂ£∞Êòé„ÄÇ
    9          // *
   10          // * @file          isr
   11          // * @company       ÊàêÈÉΩÈÄêÈ£ûÁßëÊäÄÊúâÈôêÂÖ¨Âè∏
   12          // * @author        ÈÄêÈ£ûÁßëÊäÄ(QQ790875685)
   13          // * @version       Êü•ÁúãdocÂÜÖversionÊñá‰ª∂ ÁâàÊú¨ËØ¥Êòé
   14          // * @Software      MDK FOR C251 V5.60
   15          // * @Target core   STC32G12K128
   16          // * @Taobao        https://seekfree.taobao.com/
   17          // * @date          2020-4-14
   18          // ******************************************************************************************************
             -**************/
   19          #include "headfile.h"
   20          #include "zf_nvic.h"
   21          // #include "zf_exti.h"
   22          #include "zf_uart.h"
   23          #include "zf_tim.h"
   24          
   25          int g_encoder_average = 0;                       //Â∑¶Âè≥ÁºñÁ†ÅÂô®ÁöÑÂπ≥ÂùáÂÄº
   26          float Gyro_Z = 0, filtered_GyroZ = 0;            // ÈôÄËû∫‰ª™ËßíÈÄüÂ∫¶ÁöÑÂéüÂßãÂÄºÂíåÂç°Â∞îÊõºÊª§Ê≥¢‰πãÂê
             -éÁöÑÂÄº
   27          int32_t g_DutyLeft = 0, g_DutyRight = 0;         // ÊúÄÂêéÁúüÊ≠£Ë¶ÅÁªôÁîµÊú∫ÁöÑPWMÂÄº
   28          
   29          //pidÊéßÂà∂Áõ∏ÂÖ≥ÂèòÈáè
   30          float speed_pid = 0, turn_pid = 0;               //ÈÄüÂ∫¶ÁéØÂíåËΩ¨ÂêëÁéØpidÁöÑÂÄº
   31          int g_speedpoint = 80;
   32          int g_leftpoint = 0, g_rightpoint = 0;           //Â∑¶Âè≥ËΩÆÁöÑÁõÆÊ†áÈÄüÂ∫¶
   33          
   34          // ËúÇÈ∏£Âô®ÊéßÂà∂Áõ∏ÂÖ≥ÂèòÈáè
   35          uint8_t beep_flag = 0;                           // ËúÇÈ∏£Âô®ÂºÄÂêØÊ†áÂøóÔºå1Ë°®Á§∫ÂºÄÂêØ
   36          uint16_t beep_count = 0;                         // ËúÇÈ∏£Âô®ËÆ°Êó∂ËÆ°Êï∞Âô®
   37          uint8_t track_ten_cnt = 0;                       //Âá∫ÂÖ•ÁéØÈáçÂ§çÂà§ÂÆöËÆ°Êó∂Âô®
   38          
   39          //UART1‰∏≠Êñ≠
   40          void UART1_Isr() interrupt 4
   41          {
   42   1      //  uint8 res;
   43   1      //  static uint8 dwon_count;
   44   1        
   45   1          if(UART1_GET_TX_FLAG)
   46   1          {
   47   2              UART1_CLEAR_TX_FLAG;
   48   2              busy[1] = 0;
   49   2          }
   50   1        
   51   1          if(UART1_GET_RX_FLAG)
   52   1          {
   53   2              UART1_CLEAR_RX_FLAG;
   54   2      //        res = SBUF;
C251 COMPILER V5.60.0,  isr                                                                10/07/25  11:57:49  PAGE 2   

   55   2      //        //Á®ãÂ∫èËá™Âä®‰∏ãËΩΩ
   56   2      //        if(res == 0x7F)
   57   2      //        {
   58   2      //            if(dwon_count++ > 20)
   59   2      //                IAP_CONTR = 0x60;
   60   2      //        }
   61   2      //        else
   62   2      //        {
   63   2      //            dwon_count = 0;
   64   2      //        }
   65   2          }
   66   1      }
   67          
   68          //UART2‰∏≠Êñ≠
   69          void UART2_Isr() interrupt 8
   70          {
   71   1          if(UART2_GET_TX_FLAG)
   72   1        {
   73   2              UART2_CLEAR_TX_FLAG;
   74   2          busy[2] = 0;
   75   2        }
   76   1          if(UART2_GET_RX_FLAG)
   77   1        {
   78   2              UART2_CLEAR_RX_FLAG;
   79   2          
   80   2          //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS2BUF
   81   2      
   82   2        }
   83   1      }
   84          
   85          
   86          //UART3‰∏≠Êñ≠
   87          void UART3_Isr() interrupt 17
   88          {
   89   1          if(UART3_GET_TX_FLAG)
   90   1        {
   91   2              UART3_CLEAR_TX_FLAG;
   92   2          busy[3] = 0;
   93   2        }
   94   1          if(UART3_GET_RX_FLAG)
   95   1        {
   96   2              UART3_CLEAR_RX_FLAG;
   97   2          
   98   2          //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS3BUF
   99   2      
  100   2        }
  101   1      }
  102          
  103          
  104          //UART4‰∏≠Êñ≠
  105          void UART4_Isr() interrupt 18
  106          {
  107   1          if(UART4_GET_TX_FLAG)
  108   1        {
  109   2              UART4_CLEAR_TX_FLAG;
  110   2          busy[4] = 0;
  111   2        }
  112   1          if(UART4_GET_RX_FLAG)
  113   1        {
  114   2              UART4_CLEAR_RX_FLAG;
  115   2          
  116   2          //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS4BUF;
  117   2          g_rxdat = S4BUF;
  118   2          g_rxbuffer[g_rxpointer++] = g_rxdat;
  119   2        }
  120   1      }
C251 COMPILER V5.60.0,  isr                                                                10/07/25  11:57:49  PAGE 3   

  121          
  122          void INT0_Isr() interrupt 0
  123          {
  124   1        
  125   1      }
  126          
  127          
  128          void INT1_Isr() interrupt 2
  129          {
  130   1      
  131   1      }
  132          
  133          
  134          // void INT2_Isr() interrupt 10
  135          // {
  136          //  INT2_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  137          // }
  138          
  139          
  140          // void INT3_Isr() interrupt 11
  141          // {
  142          //  INT3_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  143          // }
  144          
  145          // void INT4_Isr() interrupt 16
  146          // {
  147          //  INT4_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  148          // }
  149          
  150          void TM0_Isr() interrupt 1
  151          {
  152   1      
  153   1      }
  154          
  155          
  156          void TM1_Isr() interrupt 3
  157          {
  158   1        int i = 0;
  159   1        
  160   1        key[0].state = P72;
  161   1        key[1].state = P71;
  162   1        key[2].state = P70;
  163   1        key[3].state = P73;
  164   1        
  165   1        for (i = 0; i < 4; i++)
  166   1        {
  167   2          switch (key[i].step)
  168   2          {
  169   3            case 0:
  170   3            {
  171   4              if (key[i].state == 0)
  172   4              {
  173   5                key[i].step = 1;
  174   5              }
  175   4            }
  176   3            break;
  177   3            
  178   3            case 1:
  179   3            {
  180   4              if (key[i].state == 0)
  181   4              {
  182   5                key[i].step = 2;
  183   5                key[i].flag = 1;
  184   5              }
  185   4              else
  186   4              {
C251 COMPILER V5.60.0,  isr                                                                10/07/25  11:57:49  PAGE 4   

  187   5                key[i].step = 0;
  188   5              }
  189   4            }
  190   3            break;
  191   3            
  192   3            case 2:
  193   3            {
  194   4              if (key[i].state == 1)
  195   4              {
  196   5                key[i].step = 0;
  197   5              }
  198   4            }
  199   3            break;
  200   3          }
  201   2        }
  202   1      
  203   1        /* Ê£ÄÊµãËµõÈÅìÁ±ªÂûãÂèòÂåñÂπ∂ÊéßÂà∂ËúÇÈ∏£Âô® */
  204   1          if (track_type != track_type_last)
  205   1          {
  206   2              // ËµõÈÅìÁ±ªÂûãÂèëÁîüÂèòÂåñÔºåÂêØÂä®ËúÇÈ∏£Âô®
  207   2              beep_flag = 1;
  208   2              beep_count = 0;  // ÈáçÁΩÆËÆ°Êï∞Âô®
  209   2              P26 = 0;         // ÊâìÂºÄËúÇÈ∏£Âô®
  210   2              
  211   2              // Êõ¥Êñ∞‰∏ä‰∏ÄÊ¨°ËµõÈÅìÁ±ªÂûã
  212   2              track_type_last = track_type;
  213   2          }
  214   1          
  215   1          /* ËúÇÈ∏£Âô®ËÆ°Êó∂ÊéßÂà∂ */
  216   1          if (beep_flag)
  217   1          {
  218   2              beep_count++;
  219   2              // 10ms * 20 = 200ms
  220   2              if (beep_count >= 10)
  221   2              {
  222   3                  beep_count = 0;
  223   3                  beep_flag = 0;
  224   3                  P26 = 1;  // ÂÖ≥Èó≠ËúÇÈ∏£Âô®
  225   3              }
  226   2          }
  227   1      
  228   1        /* Âá∫ÂÖ•ÂçÅÂ≠óÂúÜÁéØËÆ°Êó∂Âà§ÂÆö */
  229   1        if (ten_change_flag == 1)
  230   1        {
  231   2          track_ten_cnt++;
  232   2          if (track_ten_cnt >= 150)
  233   2          {
  234   3            track_ten_flag = 1;
  235   3            track_ten_cnt = 0;
  236   3            ten_change_flag = 0;
  237   3          }
  238   2        }
  239   1      }
  240          
  241          
  242          void TM2_Isr() interrupt 12
  243          {
  244   1        TIM2_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  245   1        
  246   1        /* ÂàùÊ≠•ËØªÂèñÂπ∂Ê∏ÖÈô§ÁºñÁ†ÅÂô®ÁöÑÂÄº */
  247   1        EncoderL.encoder_original = get_left_encoder();
  248   1        EncoderR.encoder_original = get_right_encoder();
  249   1      
  250   1        /* ÂØπÁºñÁ†ÅÂô®ÁöÑÂÄºËøõË°åÊª§Ê≥¢ */
  251   1        EncoderL.encoder_final = lowpass_filter(&leftSpeedFilt, EncoderL.encoder_original);
  252   1        EncoderR.encoder_final = lowpass_filter(&rightSpeedFilt, EncoderR.encoder_original);
C251 COMPILER V5.60.0,  isr                                                                10/07/25  11:57:49  PAGE 5   

  253   1      
  254   1        /* ÂØπÁºñÁ†ÅÂô®ÁöÑÂÄºËøõË°åÂºÇÂ∏∏Ê∂àÈô§ */
  255   1        EncoderL.encoder_final = encoder_debounce(&EncoderDeboL, EncoderR.encoder_final);
  256   1        EncoderR.encoder_final = encoder_debounce(&EncoderDeboR, EncoderR.encoder_final);
  257   1      
  258   1        /* ÂèñÂ∑¶Âè≥ÁºñÁ†ÅÂô®Âπ≥ÂùáÂÄº */
  259   1        g_encoder_average = (EncoderL.encoder_final + EncoderR.encoder_final) / 2;
  260   1      
  261   1        /* ËØªÂèñÈôÄËû∫‰ª™ÂéüÂßãÊï∞ÊçÆÂπ∂Â∞ÜÂÖ∂ËΩ¨Âåñ‰∏∫Áâ©ÁêÜÊï∞ÊçÆ */
  262   1        imu963ra_get_gyro();
  263   1        Gyro_Z = imu963ra_gyro_transition(imu963ra_gyro_z);
  264   1      
  265   1        /* ÂØπGyro_ZËøõË°åÂç°Â∞îÊõºÊª§Ê≥¢ */
  266   1        filtered_GyroZ = kalman_update(&imu693_kf, Gyro_Z);
  267   1        
  268   1        /* ËΩ¨ÂêëÁéØPIDÊéßÂà∂ */
  269   1        turn_pid = pid_poisitional_turnning(&TurnPID, position, filtered_GyroZ);
  270   1      
  271   1        /* Êõ¥Êñ∞Âç°Â∞îÊõºÊª§Ê≥¢Âô®ÁöÑÂÄº */
  272   1        kalman_predict(&imu693_kf, turn_pid);
  273   1      
  274   1        /* ÈÄüÂ∫¶ÁéØPIDÊéßÂà∂ */
  275   1        speed_pid = pid_increment(&SpeedPID, g_encoder_average, g_speedpoint);
  276   1      
  277   1        /* ÊéßÂà∂ÁîµÊú∫ */
  278   1        g_DutyLeft = (int32_t)(speed_pid - turn_pid);
  279   1        g_DutyRight = (int32_t)(speed_pid + turn_pid);
  280   1      
  281   1        if (protection_flag == 1)
  282   1        {
  283   2          pid_clean(&SpeedPID);  // Ê∏ÖÈô§ÈÄüÂ∫¶ÁéØPID
  284   2          pid_clean(&TurnPID);   // Ê∏ÖÈô§ËΩ¨ÂêëÁéØPID
  285   2      
  286   2          set_motor_pwm(0, 0);
  287   2        }
  288   1        else
  289   1        {
  290   2          set_motor_pwm(g_DutyLeft, g_DutyRight);
  291   2        }
  292   1      }
  293          
  294          
  295          void TM3_Isr() interrupt 19
  296          {
  297   1        TIM3_CLEAR_FLAG; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  298   1        
  299   1      }
  300          
  301          void TM4_Isr() interrupt 20
  302          {
  303   1        TIM4_CLEAR_FLAG; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  304   1      
  305   1      }
  306          
  307          //void  INT0_Isr()  interrupt 0;
  308          //void  TM0_Isr()   interrupt 1;
  309          //void  INT1_Isr()  interrupt 2;
  310          //void  TM1_Isr()   interrupt 3;
  311          //void  UART1_Isr() interrupt 4;
  312          //void  ADC_Isr()   interrupt 5;
  313          //void  LVD_Isr()   interrupt 6;
  314          //void  PCA_Isr()   interrupt 7;
  315          //void  UART2_Isr() interrupt 8;
  316          //void  SPI_Isr()   interrupt 9;
  317          //void  INT2_Isr()  interrupt 10;
  318          //void  INT3_Isr()  interrupt 11;
C251 COMPILER V5.60.0,  isr                                                                10/07/25  11:57:49  PAGE 6   

  319          //void  TM2_Isr()   interrupt 12;
  320          //void  INT4_Isr()  interrupt 16;
  321          //void  UART3_Isr() interrupt 17;
  322          //void  UART4_Isr() interrupt 18;
  323          //void  TM3_Isr()   interrupt 19;
  324          //void  TM4_Isr()   interrupt 20;
  325          //void  CMP_Isr()   interrupt 21;
  326          //void  I2C_Isr()   interrupt 24;
  327          //void  USB_Isr()   interrupt 25;
  328          //void  PWM1_Isr()  interrupt 26;
  329          //void  PWM2_Isr()  interrupt 27;


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1286     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        38     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       101     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
